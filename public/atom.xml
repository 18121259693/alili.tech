<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alili</title>
  
  <subtitle>踩坑小报告</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://alili.tech/"/>
  <updated>2018-10-11T11:57:25.207Z</updated>
  <id>https://alili.tech/</id>
  
  <author>
    <name>Fan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nintendo Switch破解原理</title>
    <link href="https://alili.tech/archive/33fa548c/"/>
    <id>https://alili.tech/archive/33fa548c/</id>
    <published>2018-10-11T11:02:36.000Z</published>
    <updated>2018-10-11T11:57:25.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nintendo-Switch"><a href="#Nintendo-Switch" class="headerlink" title="Nintendo Switch"></a>Nintendo Switch</h1><p>Nintendo Switch ，是任天堂出品的电子游戏机 ，于2017年3月3日在日本、北美、欧洲和香港发售，同年12月1日在韩国与台湾发售。 拥有可拆卸控制器和可分离式主机，游戏载体使用了专用卡匣 。<br>主机处理器使用了NVIDIA定制的Tegra X1系统芯片 ，这是任天堂首次采用NVIDIA的系统芯片。<br>任天堂Switch主机的内置存储空间为32GB，可使用microSD进行扩充，最高支持microSDXC标准，最大支持2TB容量； 主机在初始系统1.0.0时只能支持到microSD标准，发售同日提供的系统2.0 .0更新使其可支持microSDXC标准。</p><h1 id="破解原理"><a href="#破解原理" class="headerlink" title="破解原理"></a>破解原理</h1><p>Nintendo Switch（任天堂switch） 的CPU使用的是Nvidia X1 T210的处理器，存在一个可进入的工程模式（Recovery Mode），简称RCM，<br>Nintendo Switch的右joycon连接口中隐藏着一个特殊金属引脚（pin10）。如果在开机时，按住音量键+，并且将这个引脚接地（pin1,7,9），Nintendo Switch就能进入工程模式（RCM），从而设法运行自制代码。</p><p>你可以在淘宝上轻易买到这个短接器。也可以通过锡纸，别针或者3D打印等很方便的制作。短接器的作用就是将这个特殊引脚接地。<br>由上可知， Nintendo Switch破解依赖的是基于Nvidia X1 T210的处理器的工程模式。注入（发射）特殊代码引导自制系统或程序。达成破解。</p><p>这个方法不会被封堵，普通的系统更新补并不会影响破解。无法通过软件层面封堵。因为工程模式启动的优先级高于系统。不论以后更新什么系统，进入RCM（工程模式是没有问题的），在即将到来的6.0版本，也只是更改了游戏文件的存储方式，变相的防范破解，目前TX1.9版本已经加入了破解。</p><p>正因为破解是基于开机短接进入工程模式的原理，在任意一次关机后，破解就会失效，需要重新进行破解。</p><h1 id="破解后可做什么，有没有什么问题"><a href="#破解后可做什么，有没有什么问题" class="headerlink" title="破解后可做什么，有没有什么问题"></a>破解后可做什么，有没有什么问题</h1><p>Nintendo Switch 的系统本质上可以看作是一个改版的LINUX的操作系统，.通过破解后，编译新的程序，可以Dump你手中的实体卡带游戏，导出存档，甚至可以看小说，听音乐，作为其他游戏主机的模拟器。玩破解游戏只是其中的一个功能。<br>所以，在放入存储卡时候，因为系统格式化的不同，也会存在一次升级的情况，这是由于不同系统对于文件存储分区的逻辑不同导致的。</p><p>扩展阅读：破解后您可以安装一个真正的发行版的Linux系统Lakka，</p><p>着力推荐国内开发者的Lakka系统，这是独立于国外的一个项目，让我们感谢他。<br>最强模拟器系统 lakka修改模拟游戏分辨率和纹理和安装教程<br><a href="https://www.91wii.com/thread-96053-1-1.html" target="_blank" rel="noopener">https://www.91wii.com/thread-96053-1-1.html</a></p><h1 id="关于BAN机"><a href="#关于BAN机" class="headerlink" title="关于BAN机"></a>关于BAN机</h1><p>由于任天堂在联网时会验证游戏文件头（每个游戏的文件头都是唯一的），所以玩破解游戏，修改存档等，都会导致被Ban，目前主要体现为两种，<br>普通BAN：具体的表现为无法联机游戏，无法进Eshop（商店），同时会由错误代码出现，但是目前游戏正常更新（例如更新中文语言）并不受影响。您可以理解为Ban机是限制了网络功能。<br>更为严厉的ban机措施，大家称之为Super Ban，具体的表现为联网后出现错误代码2137-7403，同时主机无法更新，游戏和dlc也无法更新，也就说，任天堂将你的主机序列号加入黑名单，直接断开所有同任天堂的联系。</p><p>您可以破解之后，进行系统备份。但目前已经出现有朋友因为不熟悉备份恢复流程变砖，所以这里不放链接，如果您要做这个事情， 记得“一机一码”，自己的备份文件只能自己用，不能用别人的。同时恢复分区的时候，要留意不要恢复错的文件，一旦误操作，是不可恢复的变砖。</p><p>我更建议，破解后断开网络，等要联网之前，重置主机再联网，可以大概率从正。这个风险较小。</p><h1 id="破解方式"><a href="#破解方式" class="headerlink" title="破解方式"></a>破解方式</h1><p>目前，Nintendo Switch的破解存在两个大的分支。<br>一类是免费的大气层/REI/破解TX安装器等。此类只能支持NSP格式游戏安装。略微复杂<br>一类是收费的TX OS。此类支持卡带DUPM出来的XCI格式，同时支持NSP安装。</p><p>因为代码公开，所以破解方式也变得逐渐多样化，希望您了解具体原理，而不是纠结于具体哪种破解方式，大致来说，论坛中简单热门的就是最好的破解方式。论坛中有不少不错的整合包，您可以任选其一进行安装。</p><p>参考资料: <a href="https://www.91wii.com/thread-93105-1-1.html" target="_blank" rel="noopener">https://www.91wii.com/thread-93105-1-1.html</a></p><blockquote><p>本文链接： <a href="https://alili.tech/archive/33fa548c/">https://alili.tech/archive/33fa548c/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nintendo-Switch&quot;&gt;&lt;a href=&quot;#Nintendo-Switch&quot; class=&quot;headerlink&quot; title=&quot;Nintendo Switch&quot;&gt;&lt;/a&gt;Nintendo Switch&lt;/h1&gt;&lt;p&gt;Nintendo Switch ，是
      
    
    </summary>
    
    
      <category term="Game" scheme="https://alili.tech/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>使用Eggjs(koa) &amp; web3.js开发你的以太坊Dapp</title>
    <link href="https://alili.tech/archive/69a6fd18/"/>
    <id>https://alili.tech/archive/69a6fd18/</id>
    <published>2018-10-10T11:33:33.000Z</published>
    <updated>2018-10-10T06:33:22.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eggjs"><a href="#Eggjs" class="headerlink" title="Eggjs"></a>Eggjs</h1><p>Eggjs 是阿里开源的企业级基于Koa2的Node.js框架.<br>eggjs基本上是开箱即用,奉行『约定优于配置』.在日常开发中,用起来非常顺畅.<br>而且生态也比较完善,koa2的插件都可以对接到框架中来.</p><h2 id="Egg-js-目录结构"><a href="#Egg-js-目录结构" class="headerlink" title="Egg.js 目录结构"></a>Egg.js 目录结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">egg-project</span><br><span class="line">├── package.json</span><br><span class="line">├── app.js (可选)</span><br><span class="line">├── agent.js (可选)</span><br><span class="line">├── app</span><br><span class="line">|   ├── router.js</span><br><span class="line">│   ├── controller</span><br><span class="line">│   |   └── home.js</span><br><span class="line">│   ├── service (可选)</span><br><span class="line">│   |   └── user.js</span><br><span class="line">│   ├── middleware (可选)</span><br><span class="line">│   |   └── response_time.js</span><br><span class="line">│   ├── schedule (可选)</span><br><span class="line">│   |   └── my_task.js</span><br><span class="line">│   ├── public (可选)</span><br><span class="line">│   |   └── reset.css</span><br><span class="line">│   ├── view (可选)</span><br><span class="line">│   |   └── home.tpl</span><br><span class="line">│   └── extend (可选)</span><br><span class="line">│       ├── helper.js (可选)</span><br><span class="line">│       ├── request.js (可选)</span><br><span class="line">│       ├── response.js (可选)</span><br><span class="line">│       ├── context.js (可选)</span><br><span class="line">│       ├── application.js (可选)</span><br><span class="line">│       └── agent.js (可选)</span><br><span class="line">├── config</span><br><span class="line">|   ├── plugin.js</span><br><span class="line">|   ├── config.default.js</span><br><span class="line">│   ├── config.prod.js</span><br><span class="line">|   ├── config.test.js (可选)</span><br><span class="line">|   ├── config.local.js (可选)</span><br><span class="line">|   └── config.unittest.js (可选)</span><br><span class="line">└── <span class="built_in">test</span></span><br><span class="line">    ├── middleware</span><br><span class="line">    |   └── response_time.test.js</span><br><span class="line">    └── controller</span><br><span class="line">        └── home.test.js</span><br></pre></td></tr></table></figure><p>如上，由框架约定的目录：</p><ul><li><code>app/router.js</code> 用于配置 URL 路由规则。</li><li><code>app/controller/**</code> 用于解析用户的输入，处理后返回相应的结果。</li><li><code>app/service/**</code> 用于编写业务逻辑层，可选，建议使用。</li><li><code>app/middleware/**</code> 用于编写中间件，可选。</li><li><code>app/public/**</code> 用于放置静态资源，可选，具体参见内置插件 <a href="https://github.com/eggjs/egg-static" target="_blank" rel="noopener">egg-static</a>。</li><li><code>app/extend/**</code> 用于框架的扩展，可选。</li><li><code>config/config.{env}.js</code> 用于编写配置文件。</li><li><code>config/plugin.js</code> 用于配置需要加载的插件。</li><li><code>test/**</code> 用于单元测试。</li><li><code>app.js</code> 和 <code>agent.js</code> 用于自定义启动时的初始化工作，可选。</li></ul><p>由内置插件约定的目录：</p><ul><li><code>app/public/**</code> 用于放置静态资源，可选，具体参见内置插件 <a href="https://github.com/eggjs/egg-static" target="_blank" rel="noopener">egg-static</a>。</li><li><code>app/schedule/**</code> 用于定时任务，可选。</li></ul><p><strong>若需自定义自己的目录规范，参见 <a href="https://eggjs.org/zh-cn/advanced/loader.html" target="_blank" rel="noopener">Loader API</a></strong></p><ul><li><code>app/view/**</code> 用于放置模板文件，可选，由模板插件约定。</li><li><code>app/model/**</code> 用于放置领域模型，可选，由领域类相关插件约定，如 <a href="https://github.com/eggjs/egg-sequelize" target="_blank" rel="noopener">egg-sequelize</a>。</li></ul><h1 id="web3-js"><a href="#web3-js" class="headerlink" title="web3.js"></a>web3.js</h1><p>为了让你的DAPP能够访问区块链上的数据，一种选择是使用web3.js提供的web3对象。底层实现上，它通过RPC 调用与本地节点通信。web3.js可以与任何暴露了RPC接口的区块链节点连接。</p><h1 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h1><p>在egg.js 自定义启动方式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> Web3 = <span class="built_in">require</span>(<span class="string">'web3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  app.beforeStart(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; config &#125; = app;</span><br><span class="line">    <span class="keyword">let</span> originWeb3;</span><br><span class="line">    <span class="comment">// web3 初始化</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> originWeb3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="string">"Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, ensure you've configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask"</span>);</span><br><span class="line">      <span class="comment">// Use Mist/MetaMask's provider</span></span><br><span class="line">      originWeb3 = <span class="keyword">new</span> Web3(originWeb3.currentProvider);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="string">`No web3 detected. Falling back to http://<span class="subst">$&#123;config.web3.host&#125;</span>:<span class="subst">$&#123;config.web3.port&#125;</span>. You should remove this fallback when you deploy live, as it\'s inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask`</span>);</span><br><span class="line">      <span class="comment">// fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)</span></span><br><span class="line">      originWeb3 = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">`http://<span class="subst">$&#123;config.web3.host&#125;</span>:<span class="subst">$&#123;config.web3.port&#125;</span>`</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把web3js挂载到app下</span></span><br><span class="line">    app.web3 = originWeb3;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个上下文,用来调用service的方法</span></span><br><span class="line">    <span class="keyword">const</span> ctx = app.createAnonymousContext();</span><br><span class="line">    app.cities = <span class="keyword">await</span> ctx.service.connection.getAdmin();</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="Service层调用智能合约"><a href="#Service层调用智能合约" class="headerlink" title="Service层调用智能合约"></a>Service层调用智能合约</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/service/</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service;</span><br><span class="line"><span class="keyword">const</span> contract = <span class="built_in">require</span>(<span class="string">'truffle-contract'</span>);</span><br><span class="line"><span class="comment">// 引入只能合约</span></span><br><span class="line"><span class="keyword">const</span> stock_artifact = <span class="built_in">require</span>(<span class="string">'../../build/contracts/Stock.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//链接合约</span></span><br><span class="line"><span class="keyword">const</span> Stock = contract(stock_artifact);</span><br><span class="line"><span class="keyword">let</span> adminAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meta;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">    <span class="keyword">this</span>.web3 = <span class="keyword">this</span>.app.web3;</span><br><span class="line">  &#125;</span><br><span class="line">  setProvider() &#123;</span><br><span class="line">    Stock.setProvider(<span class="keyword">this</span>.web3.currentProvider);</span><br><span class="line">    <span class="comment">// 解决apply报错</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> Stock.currentProvider.sendAsync !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      Stock.currentProvider.sendAsync = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stock.currentProvider.send.apply(</span><br><span class="line">          Stock.currentProvider, <span class="built_in">arguments</span></span><br><span class="line">        );</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getAccounts() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setProvider();</span><br><span class="line">      <span class="comment">// Get the initial account balance so it can be displayed.</span></span><br><span class="line">      <span class="comment">// 使用web3.js 与只能合约交互</span></span><br><span class="line">      <span class="keyword">this</span>.web3.eth.getAccounts(<span class="function"><span class="keyword">function</span>(<span class="params">err, accs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'There was an error fetching your accounts.'</span>);</span><br><span class="line">          reject(<span class="string">'There was an error fetching your accounts.'</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (accs.length === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"Couldn't get any accounts! Make sure your Ethereum client is configured correctly."</span>);</span><br><span class="line">          reject(<span class="string">"Couldn't get any accounts! Make sure your Ethereum client is configured correctly."</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.accounts = accs;</span><br><span class="line">        resolve(<span class="keyword">this</span>.accounts);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getBalance(account) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setProvider();</span><br><span class="line">      Stock.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</span><br><span class="line">        meta = instance;</span><br><span class="line">        <span class="keyword">return</span> meta.getBalance.call(account, &#123; <span class="attr">from</span>: adminAddress &#125;);</span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        resolve(&#123;</span><br><span class="line">          shareLotsLength: value[<span class="number">0</span>],</span><br><span class="line">          total: value[<span class="number">1</span>],</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(e);</span><br><span class="line">          reject(<span class="string">'Error 404'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加用户</span></span><br><span class="line">  <span class="keyword">async</span> addMember(address, name, empNo) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.adminAddress) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">this</span>.getAdmin();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.setProvider();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      Stock.deployed().then(<span class="function"><span class="params">instance</span> =&gt;</span> &#123;</span><br><span class="line">        meta = instance;</span><br><span class="line">        <span class="keyword">return</span> meta.addMember(address, name, <span class="built_in">Number</span>(empNo), &#123; <span class="attr">from</span>: adminAddress || <span class="string">'0x0000000000000000000000000000000000000000'</span> &#125;);</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="string">'not found'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; value.logs.length; i++) &#123;</span><br><span class="line">          <span class="keyword">const</span> log = value.logs[i];</span><br><span class="line">          <span class="keyword">if</span> (log.event === <span class="string">'addmember'</span>) &#123;</span><br><span class="line">            args = log.args;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        resolve(args);</span><br><span class="line">      &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(e);</span><br><span class="line">          reject(<span class="string">'add Member error'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">      ;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取用户</span></span><br><span class="line">  getAdmin() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setProvider();</span><br><span class="line">      Stock.deployed().then(<span class="function"><span class="params">instance</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance.getAdmin.call();</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        adminAddress = value;</span><br><span class="line">        resolve(value);</span><br><span class="line">      &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(e);</span><br><span class="line">          reject(<span class="string">'getAdmin error'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ConnectionService;</span><br></pre></td></tr></table></figure><p>完整Demo:  <a href="https://github.com/Fantasy9527/egg-block-chain" target="_blank" rel="noopener">https://github.com/Fantasy9527/egg-block-chain</a></p><h1 id="Demo-使用方法"><a href="#Demo-使用方法" class="headerlink" title="Demo 使用方法"></a>Demo 使用方法</h1><h3 id="全局安装truffle"><a href="#全局安装truffle" class="headerlink" title="全局安装truffle"></a>全局安装truffle</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g truffle</span><br></pre></td></tr></table></figure><h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转移</span></span><br><span class="line">truffle migrate </span><br><span class="line"></span><br><span class="line"><span class="comment">#编译合约</span></span><br><span class="line">truffle compile</span><br></pre></td></tr></table></figure><h3 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i</span><br><span class="line">$ npm run dev</span><br><span class="line">$ open http://localhost:7001/</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line">$ npm stop</span><br></pre></td></tr></table></figure><blockquote><p>本文链接： <a href="https://alili.tech/archive/69a6fd18/">https://alili.tech/archive/69a6fd18/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Eggjs&quot;&gt;&lt;a href=&quot;#Eggjs&quot; class=&quot;headerlink&quot; title=&quot;Eggjs&quot;&gt;&lt;/a&gt;Eggjs&lt;/h1&gt;&lt;p&gt;Eggjs 是阿里开源的企业级基于Koa2的Node.js框架.&lt;br&gt;eggjs基本上是开箱即用,奉行『约定优于配
      
    
    </summary>
    
    
      <category term="区块链" scheme="https://alili.tech/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>2018年10月国内浏览器数据统计</title>
    <link href="https://alili.tech/archive/4a50d81d/"/>
    <id>https://alili.tech/archive/4a50d81d/</id>
    <published>2018-09-30T16:00:00.000Z</published>
    <updated>2018-10-06T22:55:46.914Z</updated>
    
    <content type="html"><![CDATA[<div id="echarts5220" style="width: 100%;height: 400px;margin: 0 auto"></div><script src="https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js"></script><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts5220'));        // 指定图表的配置项和数据        var option = {"textStyle":{"color":"#fff"},"title":{"text":"2018年10月国内浏览器数据统计","subtext":"浏览器数据分析","x":"center","textStyle":{"color":"#fff"}},"tooltip":{"trigger":"item","formatter":"{a} <br/>{b} : {c} ({d}%)"},"legend":{"type":"scroll","orient":"vertical","right":10,"top":120,"bottom":20,"data":["Chrome","IE 9.0","IE 11.0","2345","QQ","IE 8.0","搜狗高速","Safari","Firefox","其他"],"textStyle":{"color":"#fff"}},"series":[{"name":"浏览器用户比例","type":"pie","radius":"55%","center":["50%","60%"],"data":[{"name":"Chrome","value":47.08},{"name":"IE 9.0","value":7.89},{"name":"IE 11.0","value":5.97},{"name":"2345","value":5.9},{"name":"QQ","value":5.88},{"name":"IE 8.0","value":5.59},{"name":"搜狗高速","value":4.68},{"name":"Safari","value":2.43},{"name":"Firefox","value":2.42},{"name":"其他","value":12.16}],"itemStyle":{"emphasis":{"shadowBlur":10,"shadowOffsetX":0,"shadowColor":"rgba(0, 0, 0, 0.5)"}}}]}        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><blockquote><p>本文链接： <a href="https://alili.tech/archive/4a50d81d/">https://alili.tech/archive/4a50d81d/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/c25273ee/">2018年09月国内浏览器数据统计</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;echarts5220&quot; style=&quot;width: 100%;height: 400px;margin: 0 auto&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://cdn.bootcss.com/echarts/3.8.0/echarts.com
      
    
    </summary>
    
    
      <category term="Data analysis" scheme="https://alili.tech/tags/Data-analysis/"/>
    
  </entry>
  
  <entry>
    <title>Centos7环境下启动Upsource失败解决办法</title>
    <link href="https://alili.tech/archive/66c1c154/"/>
    <id>https://alili.tech/archive/66c1c154/</id>
    <published>2018-09-29T11:33:33.000Z</published>
    <updated>2018-10-06T23:25:45.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>Centos7环境下启动Upsource的时候出现以下报错,我在Mac上启动upsource的时候一切正常.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Upsource Error] Failed to start JetBrains Upsource 2018.2 due to unexpected exception: Native random generator does not seem to have enough entropy for JetBrains Upsource 2018.2 to start. [Upsource Error] You can fix it by switching to PRNG (with -Djava.security.egd=/dev/zrandom) or by reconfiguring your operation system to provide more random bits.12</span><br></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li>复制 upsource.jvmoptions.dist ==&gt; upsource.jvmoptions</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="variable">$upsource_path</span>/conf/upsource.jvmoptions.dist <span class="variable">$upsource_path</span>/conf/upsource.jvmoptions</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑 $upsource_path/conf/upsource.jvmoptions文件,最后一行加上:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djava.security.egd=/dev/zrandom</span><br></pre></td></tr></table></figure><ol start="3"><li>启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$upsource_path</span>/bin/upsource.sh start</span><br></pre></td></tr></table></figure><blockquote><p>本文链接： <a href="https://alili.tech/archive/66c1c154/">https://alili.tech/archive/66c1c154/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;报错&quot;&gt;&lt;a href=&quot;#报错&quot; class=&quot;headerlink&quot; title=&quot;报错&quot;&gt;&lt;/a&gt;报错&lt;/h2&gt;&lt;p&gt;Centos7环境下启动Upsource的时候出现以下报错,我在Mac上启动upsource的时候一切正常.&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
    
      <category term="Upsource" scheme="https://alili.tech/tags/Upsource/"/>
    
  </entry>
  
  <entry>
    <title>利用ngrok给你的机器打个洞 - 内网穿透</title>
    <link href="https://alili.tech/archive/df8d5e8d/"/>
    <id>https://alili.tech/archive/df8d5e8d/</id>
    <published>2018-09-11T16:00:00.000Z</published>
    <updated>2018-10-06T23:12:40.101Z</updated>
    
    <content type="html"><![CDATA[<p>我有很多自己的个人代码是跑在家里的服务器中的.一般来说都是自动化的处理我的一些生活问题,与数据收集等相关活动.<br>所以一般没有客户端访问家里服务器的需求.<br>但是很多时候脑子突发奇想.有一些小点子,一些小的bug或者小的优化,代码修改完成之后,有一个部署到需求.<br>因为家里服务器没有一个稳定的外网IP的,外网不能直接连接服务器.<br>所以我们需要 <code>内网穿透</code>.</p><h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>家里用的是小米路由器,小米路由器里面集成了花生壳,理论上是可以做到内网穿透的.无奈的是,一直都没有配置成功过.</p><p>网上找过很多内网穿透的工具:</p><ul><li>花生壳</li><li>NAT</li><li>frp</li><li>ngrok</li><li>localtunnel</li></ul><h2 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h2><p>选择ngrok的原因很简单,配置方便,并且支持tcp协议.<br>支持tcp协议代表,我可以直接在外面用SSH来访问家里的机器.</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li>首先你需要去<a href="https://ngrok.com/" target="_blank" rel="noopener">官网</a>注册一个账号</li><li>下载ngrok,并且解压到一个你喜欢的目录下面</li><li>去官网复制你的授权码</li><li>授权ngrok</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok authtoken 授权码</span><br></pre></td></tr></table></figure><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok http 8080</span><br></pre></td></tr></table></figure><h3 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok tcp 22</span><br></pre></td></tr></table></figure><p><img src="https://ngrok.com/static/img/ngrok-demo-static.png" alt=""></p><p>最终你会得到,一个外网可以访问的地址.<br>用这个地址就可以直接访问到你本机的端口了.</p><p>当我们拥有这样一个公网地址之后,我们就可以ssh来控制家里的机器<br>或者使用github的webhook来做一切你想要做的事情.</p><blockquote><p>本文链接： <a href="https://alili.tech/archive/df8d5e8d/">https://alili.tech/archive/df8d5e8d/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/ef96a5b6/">Network笔记整理 - 网络协议与网络分层</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我有很多自己的个人代码是跑在家里的服务器中的.一般来说都是自动化的处理我的一些生活问题,与数据收集等相关活动.&lt;br&gt;所以一般没有客户端访问家里服务器的需求.&lt;br&gt;但是很多时候脑子突发奇想.有一些小点子,一些小的bug或者小的优化,代码修改完成之后,有一个部署到需求.&lt;b
      
    
    </summary>
    
    
      <category term="Network" scheme="https://alili.tech/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>2018年09月Github Javascript趋势收集</title>
    <link href="https://alili.tech/archive/f2c7a3e5/"/>
    <id>https://alili.tech/archive/f2c7a3e5/</id>
    <published>2018-09-07T16:00:00.000Z</published>
    <updated>2018-10-06T23:03:52.776Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/github_16.png" alt=""></p><h2 id="felixrieseberg-windows95"><a href="#felixrieseberg-windows95" class="headerlink" title="felixrieseberg / windows95 :"></a><a href="https://github.com/felixrieseberg/windows95" target="_blank" rel="noopener">felixrieseberg / windows95</a> :</h2><p>11,905 stars this month</p><p>💩🚀 Windows 95 in Electron. Runs on macOS, Linux, and Windows. </p><hr><h2 id="trekhleb-javascript-algorithms"><a href="#trekhleb-javascript-algorithms" class="headerlink" title="trekhleb / javascript-algorithms :"></a><a href="https://github.com/trekhleb/javascript-algorithms" target="_blank" rel="noopener">trekhleb / javascript-algorithms</a> :</h2><p>3,745 stars this month</p><p>Algorithms and data structures implemented in JavaScript with explanations and links to further readings </p><hr><h2 id="antvis-f2"><a href="#antvis-f2" class="headerlink" title="antvis / f2 :"></a><a href="https://github.com/antvis/f2" target="_blank" rel="noopener">antvis / f2</a> :</h2><p>3,915 stars this month</p><p>📱📈An elegant, interactive and flexible charting library for mobile. </p><hr><h2 id="vuejs-vue"><a href="#vuejs-vue" class="headerlink" title="vuejs / vue :"></a><a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vuejs / vue</a> :</h2><p>3,579 stars this month</p><p>🖖 A progressive, incrementally-adoptable JavaScript framework for building UI on the web. </p><hr><h2 id="checkly-puppeteer-recorder"><a href="#checkly-puppeteer-recorder" class="headerlink" title="checkly / puppeteer-recorder :"></a><a href="https://github.com/checkly/puppeteer-recorder" target="_blank" rel="noopener">checkly / puppeteer-recorder</a> :</h2><p>3,547 stars this month</p><p>Puppeteer recorder is a Chrome extension that records your browser interactions and generates a Puppeteer script. </p><hr><h2 id="facebook-react"><a href="#facebook-react" class="headerlink" title="facebook / react :"></a><a href="https://github.com/facebook/react" target="_blank" rel="noopener">facebook / react</a> :</h2><p>2,794 stars this month</p><p>A declarative, efficient, and flexible JavaScript library for building user interfaces. </p><hr><h2 id="copy-v86"><a href="#copy-v86" class="headerlink" title="copy / v86 :"></a><a href="https://github.com/copy/v86" target="_blank" rel="noopener">copy / v86</a> :</h2><p>2,803 stars this month</p><p>x86 virtualization in JavaScript, running in your browser and NodeJS </p><hr><h2 id="Microsoft-ailab"><a href="#Microsoft-ailab" class="headerlink" title="Microsoft / ailab :"></a><a href="https://github.com/Microsoft/ailab" target="_blank" rel="noopener">Microsoft / ailab</a> :</h2><p>2,456 stars this month</p><p>Experience, Learn and Code the latest breakthrough innovations with Microsoft AI </p><hr><h2 id="rwv-chinese-dos-games"><a href="#rwv-chinese-dos-games" class="headerlink" title="rwv / chinese-dos-games :"></a><a href="https://github.com/rwv/chinese-dos-games" target="_blank" rel="noopener">rwv / chinese-dos-games</a> :</h2><p>2,334 stars this month</p><p>🎮 Chinese DOS games in browser. </p><hr><h2 id="lukeed-pwa"><a href="#lukeed-pwa" class="headerlink" title="lukeed / pwa :"></a><a href="https://github.com/lukeed/pwa" target="_blank" rel="noopener">lukeed / pwa</a> :</h2><p>2,065 stars this month</p><p>(WIP) Universal PWA Builder </p><hr><h2 id="GoogleChrome-puppeteer"><a href="#GoogleChrome-puppeteer" class="headerlink" title="GoogleChrome / puppeteer :"></a><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">GoogleChrome / puppeteer</a> :</h2><p>1,865 stars this month</p><p>Headless Chrome Node API </p><hr><h2 id="facebook-create-react-app"><a href="#facebook-create-react-app" class="headerlink" title="facebook / create-react-app :"></a><a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">facebook / create-react-app</a> :</h2><p>1,650 stars this month</p><p>Create React apps with no build configuration. </p><hr><h2 id="pomber-code-surfer"><a href="#pomber-code-surfer" class="headerlink" title="pomber / code-surfer :"></a><a href="https://github.com/pomber/code-surfer" target="_blank" rel="noopener">pomber / code-surfer</a> :</h2><p>1,895 stars this month</p><p>React component for scrolling, zooming and highlighting code samples &lt;🏄/&gt; </p><hr><h2 id="axios-axios"><a href="#axios-axios" class="headerlink" title="axios / axios :"></a><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios / axios</a> :</h2><p>1,780 stars this month</p><p>Promise based HTTP client for the browser and node.js </p><hr><h2 id="zeeshanu-dumper-js"><a href="#zeeshanu-dumper-js" class="headerlink" title="zeeshanu / dumper.js :"></a><a href="https://github.com/zeeshanu/dumper.js" target="_blank" rel="noopener">zeeshanu / dumper.js</a> :</h2><p>1,832 stars this month</p><p>A better and pretty variable inspector for your Node.js applications </p><hr><h2 id="jxnblk-mdx-deck"><a href="#jxnblk-mdx-deck" class="headerlink" title="jxnblk / mdx-deck :"></a><a href="https://github.com/jxnblk/mdx-deck" target="_blank" rel="noopener">jxnblk / mdx-deck</a> :</h2><p>1,734 stars this month</p><p>♠️ MDX-based presentation decks </p><hr><h2 id="airbnb-javascript"><a href="#airbnb-javascript" class="headerlink" title="airbnb / javascript :"></a><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb / javascript</a> :</h2><p>1,556 stars this month</p><p>JavaScript Style Guide </p><hr><h2 id="hasura-graphqurl"><a href="#hasura-graphqurl" class="headerlink" title="hasura / graphqurl :"></a><a href="https://github.com/hasura/graphqurl" target="_blank" rel="noopener">hasura / graphqurl</a> :</h2><p>1,646 stars this month</p><p>curl for GraphQL with autocomplete, subscriptions and GraphiQL. Also a dead-simple universal javascript GraphQL client. </p><hr><h2 id="BestDingSheng-resources"><a href="#BestDingSheng-resources" class="headerlink" title="BestDingSheng / resources :"></a><a href="https://github.com/BestDingSheng/resources" target="_blank" rel="noopener">BestDingSheng / resources</a> :</h2><p>1,625 stars this month</p><p>知名互联网企业内推资料整理 持续更新ing 。 目前已经维护五个微信群接近3000人，欢迎你的加入！ </p><hr><h2 id="alibaba-ice"><a href="#alibaba-ice" class="headerlink" title="alibaba / ice :"></a><a href="https://github.com/alibaba/ice" target="_blank" rel="noopener">alibaba / ice</a> :</h2><p>1,486 stars this month</p><p>🚀 飞冰 - 让前端开发简单而友好，海量可复用物料，配套桌面工具极速构建前端应用，效率提升 100% </p><hr><h2 id="facebook-react-native"><a href="#facebook-react-native" class="headerlink" title="facebook / react-native :"></a><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">facebook / react-native</a> :</h2><p>1,348 stars this month</p><p>A framework for building native apps with React. </p><hr><h2 id="ai-nanoid"><a href="#ai-nanoid" class="headerlink" title="ai / nanoid :"></a><a href="https://github.com/ai/nanoid" target="_blank" rel="noopener">ai / nanoid</a> :</h2><p>1,476 stars this month</p><p>A tiny (145 bytes), secure, URL-friendly, unique string ID generator for JavaScript. </p><hr><h2 id="nodejs-node"><a href="#nodejs-node" class="headerlink" title="nodejs / node :"></a><a href="https://github.com/nodejs/node" target="_blank" rel="noopener">nodejs / node</a> :</h2><p>1,172 stars this month</p><p>Node.js JavaScript runtime ✨🐢🚀✨ </p><hr><h2 id="r-spacex-SpaceX-API"><a href="#r-spacex-SpaceX-API" class="headerlink" title="r-spacex / SpaceX-API :"></a><a href="https://github.com/r-spacex/SpaceX-API" target="_blank" rel="noopener">r-spacex / SpaceX-API</a> :</h2><p>1,330 stars this month</p><p>🚀 Open Source REST API for rocket, core, capsule, pad, and launch data </p><hr><h2 id="React-Proto-react-proto"><a href="#React-Proto-react-proto" class="headerlink" title="React-Proto / react-proto :"></a><a href="https://github.com/React-Proto/react-proto" target="_blank" rel="noopener">React-Proto / react-proto</a> :</h2><p>1,329 stars this month</p><p>🎨 React application prototyping tool for developers and designers. </p><hr><blockquote><p>本文链接： <a href="https://alili.tech/archive/f2c7a3e5/">https://alili.tech/archive/f2c7a3e5/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/650c34ac/">2017年08月Github Javascript趋势收集</a></li><li><a href="https://alili.tech/archive/53fea45f/">2017年09月Github Javascript趋势收集</a></li><li><a href="https://alili.tech/archive/1b9974b0/">2017年11月Github Javascript趋势收集</a></li><li><a href="https://alili.tech/archive/408ec5a5/">2017年12月Github Javascript趋势收集</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/github_16.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;felixrieseberg-windows95&quot;&gt;&lt;a href=&quot;#felixrieseberg-windows95&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="Trending" scheme="https://alili.tech/tags/Trending/"/>
    
  </entry>
  
  <entry>
    <title>前端单页应用微服务化解决方案8 - 二次构建</title>
    <link href="https://alili.tech/archive/ce685b9f/"/>
    <id>https://alili.tech/archive/ce685b9f/</id>
    <published>2018-09-06T17:00:00.000Z</published>
    <updated>2018-10-06T23:39:52.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二次构建"><a href="#二次构建" class="headerlink" title="二次构建"></a>二次构建</h1><blockquote><p>进一步优化我们的微前端性能</p></blockquote><p>在微前端这种形势的架构,每个模块都会输出固定的文件,比如之前说的:</p><ul><li>项目配置文件</li><li>Store.js 文件</li><li>main.js 渲染入口文件</li></ul><blockquote><p>这三个,是微前端架构中每个模块必要的三个文件.</p></blockquote><p>在模块加载器启动整个项目的时候,都必须要加载所有模块的配置文件与Store.js文件.<br>在前面的文章中有说 <code>配置自动化</code>的问题,这其实就是一种简单的二次构建.<br>虽然每一个模块的配置文件体积不是很大,但是每一个文件都会加载,是项目启动的必要文件.<br>每一个文件都会占一个http请求,每一个文件的阻塞都会影响项目的启动时间.</p><p>所以,我们的<code>Store.js</code>也必须是要优化的.<br>当然如果我们的模块数量不是很多的话,我们没有优化的必要.但是一旦项目变得更加庞大,有好几十个模块.<br>我们不可能一次加载几十个文件,我们必须要在项目部署之后,还要对整个项目重新再次构建来优化与整合我们的项目.</p><p>我们的Store.js 是一个amd模块,所以我们需要一个合并amd模块的工具.</p><h1 id="Grunt-or-Gulp"><a href="#Grunt-or-Gulp" class="headerlink" title="Grunt or Gulp"></a>Grunt or Gulp</h1><p>像这样的场景,用grunt,gulp这样的任务管理工具再合适不过了.<br>不管这两个工具好像已经是上个世纪的东西了,但是他的生态还是非常完善的.用在微前端的二次构建中非常合适.</p><p>例如Gulp:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'storeConcat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'project/**/Store.js'</span>)</span><br><span class="line">        .pipe(concat(<span class="string">'Store.js'</span>)) <span class="comment">//合并后的文件名</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">'project/'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>像这样的优化点还有非常多,在项目发布之后,在二次构建与优化代码.<br>在后期庞大的项目中,是有很多空间来提升我们项目的性能的.</p><p>未完待续 …</p><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><p><a href="http://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></p><p><a href="http://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></p><p><a href="http://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></p><p><a href="http://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></p><p><a href="http://alili.tech/archive/5ff0b366/">前端单页应用微服务化解决方案5 - 路由分发</a></p><p><a href="http://alili.tech/archive/ffb0c5ab/">前端单页应用微服务化解决方案6 - 构建与部署</a></p><p><a href="http://alili.tech/archive/5e00e43d/">前端单页应用微服务化解决方案7 - 静态数据共享</a></p><p><a href="http://alili.tech/archive/ce685b9f/">前端单页应用微服务化解决方案8 - 二次构建</a></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="http://microfrontend.alili.tech/" target="_blank" rel="noopener">前端微服务化 Micro Frontend Demo</a></p><p><a href="https://github.com/Fantasy9527/lotus-scaffold-micro-frontend-portal" target="_blank" rel="noopener">微前端模块加载器</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-base-demo" target="_blank" rel="noopener">微前端Base App示例源码</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-submodule-demo" target="_blank" rel="noopener">微前端子项目示例源码</a></p><blockquote><p>本文链接： <a href="https://alili.tech/archive/ce685b9f/">https://alili.tech/archive/ce685b9f/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></li><li><a href="https://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></li><li><a href="https://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></li><li><a href="https://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二次构建&quot;&gt;&lt;a href=&quot;#二次构建&quot; class=&quot;headerlink&quot; title=&quot;二次构建&quot;&gt;&lt;/a&gt;二次构建&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;进一步优化我们的微前端性能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在微前端这种形势的架构,每个
      
    
    </summary>
    
    
      <category term="微前端" scheme="https://alili.tech/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端单页应用微服务化解决方案7 - 静态数据共享</title>
    <link href="https://alili.tech/archive/5e00e43d/"/>
    <id>https://alili.tech/archive/5e00e43d/</id>
    <published>2018-09-05T17:00:00.000Z</published>
    <updated>2018-10-06T23:39:52.208Z</updated>
    
    <content type="html"><![CDATA[<p>在前面的一些介绍,相信你对微前端已经有了一个相对完整的认知.<br>下面介绍一下,再开发过程中我的一些小技巧与处理方法.</p><h1 id="动态入口"><a href="#动态入口" class="headerlink" title="动态入口"></a>动态入口</h1><p>当有新的子模块会挂载到项目中的时候,在UI中肯定需要一个新的入口进入子模块的UI.<br>而这样一个入口,是需要动态生成的.</p><p><img src="https://alili.tech/images/micro/base-demo.jpg" alt=""></p><p>例如:图中左边的菜单,不应该是代码写死的.而是根据每个模块提供的数据自动生成的.</p><p>不然每次发布新的模块,我们都需要在最外面的这个框架修改代码.这样就谈不上什么独立部署了.</p><h1 id="静态数据共享"><a href="#静态数据共享" class="headerlink" title="静态数据共享"></a>静态数据共享</h1><p>想要达到上面所的效果,我们可以这样做.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ~/common/menu.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; isUrl &#125; <span class="keyword">from</span> <span class="string">'../utils/utils'</span></span><br><span class="line"><span class="keyword">let</span> menuData = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'模块1'</span>,</span><br><span class="line">    icon: <span class="string">'table'</span>,</span><br><span class="line">    path: <span class="string">'module1'</span>,</span><br><span class="line">    rank: <span class="number">1</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'Page1'</span>,</span><br><span class="line">        path: <span class="string">'page1'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'Page2'</span>,</span><br><span class="line">        path: <span class="string">'page2'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'Page3'</span>,</span><br><span class="line">        path: <span class="string">'page3'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> originParentPath = <span class="string">'/'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatter</span>(<span class="params">data, parentPath = originParentPath, parentAuthority</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里,我们对外导出 这个模块的菜单数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> menuData</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> menuDate <span class="keyword">from</span> <span class="string">'./common/menu'</span></span><br><span class="line"><span class="keyword">import</span> createHistory <span class="keyword">from</span> <span class="string">'history/createBrowserHistory'</span></span><br><span class="line"><span class="keyword">const</span> history = createHistory()</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们拿到数据之后,用一个reducer函数返回我们的菜单数据.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">menu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> menuDate</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终以Store.js对外导出我们的菜单数据,在注册的时候,每个应用都可以拿到这个数据了</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> storeInstance = createStore(combineReducers(&#123; <span class="attr">namespace</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'list'</span>, menu, render, to &#125;))</span><br></pre></td></tr></table></figure><p>当我们的Base模块,拿到所有子模块的菜单数据,把他们合并后,就可以渲染出正确的菜单了.</p><blockquote><p>这只是一个小技巧,像这样的技巧足以帮助我们在代码中完成很多想不到的事情.<br>这里只是打开一个思路,后续还有更多的微前端小技巧相关的文章.<br>未完待续 …</p></blockquote><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><p><a href="http://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></p><p><a href="http://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></p><p><a href="http://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></p><p><a href="http://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></p><p><a href="http://alili.tech/archive/5ff0b366/">前端单页应用微服务化解决方案5 - 路由分发</a></p><p><a href="http://alili.tech/archive/ffb0c5ab/">前端单页应用微服务化解决方案6 - 构建与部署</a></p><p><a href="http://alili.tech/archive/5e00e43d/">前端单页应用微服务化解决方案7 - 静态数据共享</a></p><p><a href="http://alili.tech/archive/ce685b9f/">前端单页应用微服务化解决方案8 - 二次构建</a></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="http://microfrontend.alili.tech/" target="_blank" rel="noopener">前端微服务化 Micro Frontend Demo</a></p><p><a href="https://github.com/Fantasy9527/lotus-scaffold-micro-frontend-portal" target="_blank" rel="noopener">微前端模块加载器</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-base-demo" target="_blank" rel="noopener">微前端Base App示例源码</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-submodule-demo" target="_blank" rel="noopener">微前端子项目示例源码</a></p><blockquote><p>本文链接： <a href="https://alili.tech/archive/5e00e43d/">https://alili.tech/archive/5e00e43d/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></li><li><a href="https://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></li><li><a href="https://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></li><li><a href="https://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在前面的一些介绍,相信你对微前端已经有了一个相对完整的认知.&lt;br&gt;下面介绍一下,再开发过程中我的一些小技巧与处理方法.&lt;/p&gt;
&lt;h1 id=&quot;动态入口&quot;&gt;&lt;a href=&quot;#动态入口&quot; class=&quot;headerlink&quot; title=&quot;动态入口&quot;&gt;&lt;/a&gt;动态入口&lt;/
      
    
    </summary>
    
    
      <category term="微前端" scheme="https://alili.tech/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端单页应用微服务化解决方案6 - 构建与部署</title>
    <link href="https://alili.tech/archive/ffb0c5ab/"/>
    <id>https://alili.tech/archive/ffb0c5ab/</id>
    <published>2018-09-04T17:00:00.000Z</published>
    <updated>2018-10-06T23:39:52.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微前端打包构建"><a href="#微前端打包构建" class="headerlink" title="微前端打包构建"></a>微前端打包构建</h1><p>微前端项目的打包,是有一些需要注意的点<br>以webpack为例:</p><h2 id="amd模块"><a href="#amd模块" class="headerlink" title="amd模块"></a>amd模块</h2><p>在之前的文章,我们有提到我们的加载器,是基于System.js来做的.<br>所以我们微前端的模块最终打包,是要符合模块规范的.<br>我们使用的是<code>amd模块</code>规范来构建我们的模块.</p><h2 id="指定基础路径"><a href="#指定基础路径" class="headerlink" title="指定基础路径"></a>指定基础路径</h2><p>因为模块打包后,调用模块出口文件的,是模块加载器.<br>为了清晰的管理每个模块,并且正确的加载到我们每一个模块的资源,<br>我们给模块的资源都指定一个<code>publicPath</code>.</p><blockquote><p>下面给出一个简单的 webpack 配置,这些配置我只是列出一些必要选项.<br>并不是一个完整的webpack配置,后续我会提供完整的微前端的Demo,提供大家参考<br>这些配置都是基于 <code>create-react-app</code> 的配置做的修改.<br>只要明白了配置的意图,明白我们打包出来的最终是一个什么样的包,<br>不管打包工具以后怎么变,技术栈怎么变,最后都是可以对接到微前端中来.</p></blockquote><p> 这里给出 <code>project.json</code> 的内容,便于后面的配置文件的阅读<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// project.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"name"</span>, <span class="comment">//模块名称</span></span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/project"</span>, <span class="comment">//模块url前缀</span></span><br><span class="line">    <span class="string">"prefix"</span>: <span class="string">"/module-prefix/"</span>, <span class="comment">//模块文件路径前缀</span></span><br><span class="line">    <span class="string">"main"</span>: <span class="string">"/module-prefix/main.js"</span>, <span class="comment">//模块渲染出口文件</span></span><br><span class="line">    <span class="string">"store"</span>: <span class="string">"/module-prefix/store.js"</span>,<span class="comment">//模块对外接口</span></span><br><span class="line">    <span class="string">"base"</span>: <span class="literal">true</span> <span class="comment">// 是否为baseapp</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 引入项目配置文件,也是前面说的 模块加载器必要文件之一</span></span><br><span class="line"><span class="keyword">const</span> projectConfig = <span class="built_in">require</span>(<span class="string">'./project.json'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: paths.appIndexJs, <span class="comment">//出口文件,模块加载器必要文件之一</span></span><br><span class="line">    store: paths.store <span class="comment">// 对外api的reducer文件,模块加载器必要文件之一</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: paths.appBuild,</span><br><span class="line">    filename: <span class="string">'[name].js?n=[chunkhash:8]'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'static/js/[name].[chunkhash:8].chunk.js'</span>,</span><br><span class="line">    publicPath: projectConfig.prefix, <span class="comment">//在output中指定模块配置好的 publicPath</span></span><br><span class="line">    libraryTarget: <span class="string">'amd'</span>, <span class="comment">//对外输出 amd模块,便于 system.js加载</span></span><br><span class="line">    library: projectConfig.name, <span class="comment">//模块的名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        oneOf: [</span><br><span class="line">          &#123;</span><br><span class="line">            test: [<span class="regexp">/\.bmp$/</span>, /\.gif$/, /\.jpe?g$/, /\.png$/],</span><br><span class="line">            <span class="comment">// loader: 'happypack/loader?id=url',</span></span><br><span class="line">            loaders: [&#123;</span><br><span class="line">              loader: <span class="built_in">require</span>.resolve(<span class="string">'url-loader'</span>),</span><br><span class="line">              options: &#123;</span><br><span class="line">                limit: <span class="number">5000</span>,</span><br><span class="line">                name: <span class="string">'static/media/[name].[hash:8].[ext]'</span>,</span><br><span class="line">                publicPath: projectConfig.prefix, <span class="comment">//我们需要在静态文件的loader加上publicPath</span></span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.(js|jsx|mjs)$/</span>,</span><br><span class="line">            include: paths.appSrc,</span><br><span class="line">            loader: <span class="string">'happypack/loader?id=babel'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                name: <span class="string">'static/js/[name].[hash:8].[ext]'</span>,</span><br><span class="line">                publicPath: projectConfig.prefix, <span class="comment">//在静态文件的loader加上publicPath</span></span><br><span class="line">              &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="built_in">require</span>.resolve(<span class="string">'file-loader'</span>),</span><br><span class="line">            exclude: [<span class="regexp">/\.(js|jsx|mjs)$/</span>, /\.html$/, /\.json$/],</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: <span class="string">'static/media/[name].[hash:8].[ext]'</span>,</span><br><span class="line">              publicPath: projectConfig.prefix, <span class="comment">//在静态文件的loader加上publicPath</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>前端单页面的部署,不管怎么自动化,工具怎么变.<br>都是把打包好的静态文件,放到服务器的正确位置下.<br>微前端的部署,是一个应用聚合的过程,我们如何把一个个模块最后接入到一个完整的项目中的呢?</p><h2 id="微前端应用完整目录"><a href="#微前端应用完整目录" class="headerlink" title="微前端应用完整目录"></a>微前端应用完整目录</h2><p>一般会放在一个nginx配置好的静态目录里,或者是其他web容器的一个静态目录.<br>看到这个目录结构,你应该能理解为什么要额外的配置 <code>publicPath</code> 了吧.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">├── index.html              // 首先浏览器会加载这个index.html,html里面会引入一个bootstrap.js的文件</span><br><span class="line">├── bootstrap.js            // 这个bootstrap.js是之前说的模块加载器打包过后的代码,</span><br><span class="line">│                           // 模块加载器会先加载 `project.config.js`,得到所有模块的配置.</span><br><span class="line">│                           // 然后才开始加载每个项目中的main.js文件,注册应用,注入store.js</span><br><span class="line">│</span><br><span class="line">├── project.config.js       // 这个文件存到是该项目的所有模块的配置,是代码自动生成的</span><br><span class="line">│                           // 之前有提到过项目配置自动化,是这个项目中唯一动态的文件.</span><br><span class="line">│                           // 目的是让模块的配置文件更新,或者新增新模块的时候,模块会自动挂载到项目中来</span><br><span class="line">│                           // 他会遍历每一个模块的project.json文件,取出内容,合并到一起</span><br><span class="line">│</span><br><span class="line">├── projectA                // 模块A目录</span><br><span class="line">│   ├── asset-manifest.json</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── main.js             // 渲染用的出口文件</span><br><span class="line">│   ├── manifest.json</span><br><span class="line">│   ├── project.json        // 模块的配置文件</span><br><span class="line">│   ├── static</span><br><span class="line">│   │   ├── js</span><br><span class="line">│   │   │   ├── 0.86ae3ec3.chunk.js</span><br><span class="line">│   │   └── media</span><br><span class="line">│   │       └── logo.db0697c1.png</span><br><span class="line">│   └── store.js            //对外输出的store.js 文件</span><br><span class="line">└── projectB                // 模块B (重要文件的位置,与模块A是一致的)</span><br><span class="line">    ├── asset-manifest.json</span><br><span class="line">    ├── main.js</span><br><span class="line">    ├── manifest.json</span><br><span class="line">    ├── project.json</span><br><span class="line">    ├── static</span><br><span class="line">    │   ├── js</span><br><span class="line">    │   │   ├── 0.86ae3ec3.chunk.js</span><br><span class="line">    │   └── media</span><br><span class="line">    │       └── logo.db0697c1.png</span><br><span class="line">    └── store.js</span><br></pre></td></tr></table></figure><h2 id="配置自动化"><a href="#配置自动化" class="headerlink" title="配置自动化"></a>配置自动化</h2><p>我们每个模块都有上面所描述的配置文件,当我们的项目多个模块的时候,我们需要把所有模块的配置文件聚合起来.<br>我这里也有写一个脚本.</p><p><a href="https://www.npmjs.com/package/micro-auto-config" target="_blank" rel="noopener">micro-auto-config</a></p><p>使用方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install micro-auto-config -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在项目根目录,用pm2启动该脚本,便可启动这个项目的配置自动化</span></span><br><span class="line">pm2 start micro-auto-config --name 你的项目名称-auto-config</span><br></pre></td></tr></table></figure><p>这样之后 <code>project.config.js</code> 就会自动生成,以及模块变动之后也会重新生成.</p><blockquote><p>未完待续 …</p></blockquote><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><p><a href="http://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></p><p><a href="http://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></p><p><a href="http://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></p><p><a href="http://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></p><p><a href="http://alili.tech/archive/5ff0b366/">前端单页应用微服务化解决方案5 - 路由分发</a></p><p><a href="http://alili.tech/archive/ffb0c5ab/">前端单页应用微服务化解决方案6 - 构建与部署</a></p><p><a href="http://alili.tech/archive/5e00e43d/">前端单页应用微服务化解决方案7 - 静态数据共享</a></p><p><a href="http://alili.tech/archive/ce685b9f/">前端单页应用微服务化解决方案8 - 二次构建</a></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="http://microfrontend.alili.tech/" target="_blank" rel="noopener">前端微服务化 Micro Frontend Demo</a></p><p><a href="https://github.com/Fantasy9527/lotus-scaffold-micro-frontend-portal" target="_blank" rel="noopener">微前端模块加载器</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-base-demo" target="_blank" rel="noopener">微前端Base App示例源码</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-submodule-demo" target="_blank" rel="noopener">微前端子项目示例源码</a></p><blockquote><p>本文链接： <a href="https://alili.tech/archive/ffb0c5ab/">https://alili.tech/archive/ffb0c5ab/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></li><li><a href="https://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></li><li><a href="https://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></li><li><a href="https://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微前端打包构建&quot;&gt;&lt;a href=&quot;#微前端打包构建&quot; class=&quot;headerlink&quot; title=&quot;微前端打包构建&quot;&gt;&lt;/a&gt;微前端打包构建&lt;/h1&gt;&lt;p&gt;微前端项目的打包,是有一些需要注意的点&lt;br&gt;以webpack为例:&lt;/p&gt;
&lt;h2 id=&quot;amd
      
    
    </summary>
    
    
      <category term="微前端" scheme="https://alili.tech/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端单页应用微服务化解决方案5 - 路由分发</title>
    <link href="https://alili.tech/archive/5ff0b366/"/>
    <id>https://alili.tech/archive/5ff0b366/</id>
    <published>2018-09-03T17:00:00.000Z</published>
    <updated>2018-10-06T23:39:52.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路由分发式微前端"><a href="#路由分发式微前端" class="headerlink" title="路由分发式微前端"></a>路由分发式微前端</h1><h2 id="从应用分发路由到路由分发应用"><a href="#从应用分发路由到路由分发应用" class="headerlink" title="从应用分发路由到路由分发应用"></a>从应用分发路由到路由分发应用</h2><p>用这句话来解释,微前端的路由,再合适不过来.</p><blockquote><p>路由分发式微前端，即通过路由将不同的业务分发到不同的、独立前端应用上。其通常可以通过 HTTP 服务器的反向代理来实现，又或者是应用框架自带的路由来解决。<br>就当前而言，通过路由分发式的微前端架构应该是采用最多、最易采用的 “微前端” 方案。但是这种方式看上去更像是多个前端应用的聚合，即我们只是将这些不同的前端应用拼凑到一起，使他们看起来像是一个完整的整体。但是它们并不是，每次用户从 A 应用到 B 应用的时候，往往需要刷新一下页面。 – 引用自phodal <a href="https://microfrontend.cn" target="_blank" rel="noopener">微前端的那些事儿</a></p></blockquote><p>在<a href="https://alili.tech/2018/09/03/Architecture/%E5%89%8D%E7%AB%AF%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%8C%96%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%883%20-%20%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E5%99%A8/">模块加载器</a>那一章的示例代码,已经非常充分了展示了路由分发应用的步骤.</p><p>在单页面前端的路由,目前有两种形式,<br>一种是所有主流浏览器都兼容多hash路由,<br>基本原理为url的hash值的改变,触发了浏览器onhashchange事件,来触发组件的更新</p><p>还有一种是高级浏览器才支持的 History API,<br>在 <code>window.history.pushState(null, null, &quot;/profile/&quot;);</code>的时候触发组件的更新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hash 模式,项目路由用的是hash模式会用到该函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hashPrefix</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">location</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> isShow = <span class="literal">false</span></span><br><span class="line">        <span class="comment">//如果该应用 有多个需要匹配的路劲</span></span><br><span class="line">        <span class="keyword">if</span>(isArray(app.path))&#123;</span><br><span class="line">            app.path.forEach(<span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(location.hash.startsWith(<span class="string">`#<span class="subst">$&#123;path&#125;</span>`</span>))&#123;</span><br><span class="line">                    isShow = <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 普通情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(location.hash.startsWith(<span class="string">`#<span class="subst">$&#123;app.path || app.url&#125;</span>`</span>))&#123;</span><br><span class="line">            isShow = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isShow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pushState 模式</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pathPrefix</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">location</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> isShow = <span class="literal">false</span></span><br><span class="line">        <span class="comment">//如果该模块 有多个需要匹配的路径</span></span><br><span class="line">        <span class="keyword">if</span>(isArray(app.path))&#123;</span><br><span class="line">            app.path.forEach(<span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(location.pathname.indexOf(<span class="string">`<span class="subst">$&#123;path&#125;</span>`</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">                    isShow = <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 普通情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(location.pathname.indexOf(<span class="string">`<span class="subst">$&#123;app.path || app.url&#125;</span>`</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">            isShow = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isShow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用注册</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">registerApp</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第三个参数为,该模块是否显示</span></span><br><span class="line">    singleSpa.registerApplication(params.name,  <span class="comment">// 模块名字</span></span><br><span class="line">                                  () =&gt; SystemJS.import(params.main), <span class="comment">// 模块渲染的入口文件</span></span><br><span class="line">                                  params.base ? <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="literal">true</span>) : pathPrefix(params) <span class="comment">// 模块显示的条件</span></span><br><span class="line">                                  );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由分发应用"><a href="#路由分发应用" class="headerlink" title="路由分发应用"></a>路由分发应用</h3><p>当url前缀,与配置中的url前缀保持一致的时候,<br>singleSpa会激活对应的模块,然后把模块内容渲染出来.</p><h3 id="应用分发路由"><a href="#应用分发路由" class="headerlink" title="应用分发路由"></a>应用分发路由</h3><p>在模块被激活的时候,模块会读取url,再渲染到对的页面.</p><blockquote><p>这就是微前端路由的路由工作流程</p></blockquote><h1 id="微前端路由的挑战"><a href="#微前端路由的挑战" class="headerlink" title="微前端路由的挑战"></a>微前端路由的挑战</h1><h2 id="Hash路由"><a href="#Hash路由" class="headerlink" title="Hash路由"></a>Hash路由</h2><p>在目前所有支持spa的前端框架中,都支持了Hash路由.<br>Hash路由都工作大致原理就是: url的Hash值的改变,触发了浏览器onhashchange事件,进而来触发组件的更新.<br>所有的前端的框架,都是基于onhashchange来更新我们的页面的.<br>当我们的架构使用微前端的话,如果选择hash路由,便可以保证所有的前端技术框架的更新事件都是一致的.<br>所以使用Hash路由也是最省心的.如果不介意Hash路由中url的 <code>#</code> 字符,在微前端中使用Hash也是推荐的.</p><h2 id="HTML5-History-路由"><a href="#HTML5-History-路由" class="headerlink" title="HTML5 History 路由"></a>HTML5 History 路由</h2><p>大家都知道,HTML5中History对象上新增了两个API <code>(pushState与replaceState)</code>.<br>在这两个新API的作用下,我们也是可以做到页面无刷新,并且更新页面的.并且url上不需要出现<code>#</code>号.<br>保持了最高的美观度(对于一些人来讲).<br>当然现在几乎所有的主流SPA技术框架都支持这一特性.<br>但是问题是,这两个API在触发的时候,是没有一个全局的事件触发的.<br>多种技术框架对History路由的实现都不一样,就算是技术栈都是 React,他的路由都有好几个版本.</p><p>那我们如何保证一个项目下,多个技术框架模块的路由做到协同呢?</p><h3 id="只有一个history"><a href="#只有一个history" class="headerlink" title="只有一个history"></a>只有一个history</h3><p>前提: 假设我们所有的项目用的都是React,我们的路由都在使用着同一个版本.</p><p>思路: 我们是可以这样做的,在我们的base前端模块(因为他总是第一个加载,也是永远都不会被销毁的模块)中的Store.js,<br>实例化一个React router的核心库<code>history</code>,通过消息总线,把这个实例传入到所有的模块中.<br>在每个模块的路由初始化的时候,是可以自定义自己的history的.把模块的history重新指定到传入的history.<br>这样就可以做到,所有模块的路由之间的协同了.<br>因为当页面切换的时候,history触发更新页面的事件,当所有模块的history都是一个的时候,所有的模块都会更新到正确的页面.<br>这样就保证了所有模块与路由都协同.</p><p>如果你看不懂我在讲什么,直接贴代码吧:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Base前端模块的 Store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// react router 的核心库 history</span></span><br><span class="line"><span class="keyword">import</span> createHistory <span class="keyword">from</span> <span class="string">'history/createBrowserHistory'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = createHistory()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> storeInstance = createStore(combineReducers(&#123; <span class="attr">namespace</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'base'</span> ,history &#125;))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应用注册</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">registerApp</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// history 直接引入进来,用systemjs直接导入实例</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        storeModule = params.store ? <span class="keyword">await</span> SystemJS.import(params.store) : &#123; <span class="attr">storeInstance</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跟派发器一起放进 customProps 中</span></span><br><span class="line">    customProps = &#123; <span class="attr">store</span>: storeModule, <span class="attr">globalEventDistributor</span>: ... &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在注册的时候传入 customProps</span></span><br><span class="line">    singleSpa.registerApplication(params.name, </span><br><span class="line">                                () =&gt; SystemJS.import(params.main), </span><br><span class="line">                                params.base ? <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="literal">true</span>) : pathPrefix(params), </span><br><span class="line">                                customProps <span class="comment">// 应用注册的时候,history会包含在 customProps 中,直接注入到模块中</span></span><br><span class="line">                                );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React main.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> singleSpaReact <span class="keyword">from</span> <span class="string">'single-spa-react'</span></span><br><span class="line"><span class="keyword">import</span> RootComponent <span class="keyword">from</span> <span class="string">'./root.component'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reactLifecycles = singleSpaReact(&#123;</span><br><span class="line">  React,</span><br><span class="line">  ReactDOM,</span><br><span class="line">  rootComponent: <span class="function">(<span class="params">spa</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在这里,把history传入到组件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">RootComponent</span>  <span class="attr">history</span>=<span class="string">&#123;spa.customProps.history&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  domElementGetter: () =&gt; document.getElementById('root')</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">...</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RootComponent</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">RootComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;this.state.store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            // 在这里重新指定Router的history</span></span><br><span class="line">          &lt;Router history=&#123;this.props.history&#125;&gt;</span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">                ...</span><br><span class="line">            &lt;/Switch&gt;</span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上就是让所有模块的路由协同,保证只有一个history的用法</p></blockquote><h3 id="多技术栈模块路由协同"><a href="#多技术栈模块路由协同" class="headerlink" title="多技术栈模块路由协同"></a>多技术栈模块路由协同</h3><p>问题: 用上面的方式是可行的,但是遗憾的是,他的应用场景比较小,只能在单一技术栈,单一路由版本的情况下使用.<br>微前端最大的优势之一就是自由选择技术栈.<br>在一个项目中,使用多个适合不同模块的技术栈.</p><p>思路: 我们其实是可以通过每一个模块对外输出一个路由跳转到接口,基于消息总线的派发,让每一个模块渲染到正确的页面.<br>比如 模块A要跳转到 <code>/a/b/c</code> ,模块a先更新到<code>/a/b/c</code>路由的页面,然后通过消息总线,告诉所有模块,现在要跳转到 <code>/a/b/c</code>了.<br>然后其他模块,有<code>/a/b/c</code>这个路由都,就直接跳转,没有的就什么都不做.</p><p>我们可以这样做:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> createHistory <span class="keyword">from</span> <span class="string">'history/createBrowserHistory'</span></span><br><span class="line"><span class="keyword">const</span> history = createHistory()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外输出一个to的接口,当一个模块需要跳转界面的时候,会向所有的模块调用这个接口,</span></span><br><span class="line"><span class="comment">// 然后对应的模块会直接渲染到正确的页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">to</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (action.type !== <span class="string">'to'</span> ) <span class="keyword">return</span> &#123; ...state, <span class="attr">path</span>: action.path &#125;</span><br><span class="line">  history.replace(action.path)</span><br><span class="line">  <span class="keyword">return</span> &#123; ...state, <span class="attr">path</span>: action.path &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> storeInstance = createStore(combineReducers(&#123; <span class="attr">namespace</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'base'</span>, to &#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; history &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这是路由跟消息总线的一种完美结合的使用方式,消息总线的潜力还有很多,后续会慢慢说明.<br>未完待续 …</p></blockquote><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><p><a href="http://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></p><p><a href="http://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></p><p><a href="http://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></p><p><a href="http://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></p><p><a href="http://alili.tech/archive/5ff0b366/">前端单页应用微服务化解决方案5 - 路由分发</a></p><p><a href="http://alili.tech/archive/ffb0c5ab/">前端单页应用微服务化解决方案6 - 构建与部署</a></p><p><a href="http://alili.tech/archive/5e00e43d/">前端单页应用微服务化解决方案7 - 静态数据共享</a></p><p><a href="http://alili.tech/archive/ce685b9f/">前端单页应用微服务化解决方案8 - 二次构建</a></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="http://microfrontend.alili.tech/" target="_blank" rel="noopener">前端微服务化 Micro Frontend Demo</a></p><p><a href="https://github.com/Fantasy9527/lotus-scaffold-micro-frontend-portal" target="_blank" rel="noopener">微前端模块加载器</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-base-demo" target="_blank" rel="noopener">微前端Base App示例源码</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-submodule-demo" target="_blank" rel="noopener">微前端子项目示例源码</a></p><blockquote><p>本文链接： <a href="https://alili.tech/archive/5ff0b366/">https://alili.tech/archive/5ff0b366/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></li><li><a href="https://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></li><li><a href="https://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></li><li><a href="https://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;路由分发式微前端&quot;&gt;&lt;a href=&quot;#路由分发式微前端&quot; class=&quot;headerlink&quot; title=&quot;路由分发式微前端&quot;&gt;&lt;/a&gt;路由分发式微前端&lt;/h1&gt;&lt;h2 id=&quot;从应用分发路由到路由分发应用&quot;&gt;&lt;a href=&quot;#从应用分发路由到路由分发应用&quot;
      
    
    </summary>
    
    
      <category term="微前端" scheme="https://alili.tech/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端单页应用微服务化解决方案4 - 消息总线</title>
    <link href="https://alili.tech/archive/a9a1f81b/"/>
    <id>https://alili.tech/archive/a9a1f81b/</id>
    <published>2018-09-02T17:00:00.000Z</published>
    <updated>2018-10-06T23:39:52.208Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>微前端的消息总线,主要的功能是搭建模块与模块之间通讯的桥梁.</p></blockquote><h1 id="黑盒子"><a href="#黑盒子" class="headerlink" title="黑盒子"></a>黑盒子</h1><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1:"></a>问题1:</h2><p>应用微服务化之后,每一个单独的模块都是一个黑盒子,<br>里面发生了什么,状态改变了什么,外面的模块是无从得知的.<br>比如<code>模块A</code>想要根据<code>模块B</code>的某一个内部状态进行下一步行为的时候,黑盒子之间没有办法通信.这是一个大麻烦.</p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>每一个模块之间都是有生命周期的.当模块被卸载的时候,如何才能保持后续的正常的通信?</p><blockquote><p>ps. 我们必须要解决这些问题,模块与模块之间的通讯太有必要了.</p></blockquote><h1 id="打破壁垒"><a href="#打破壁垒" class="headerlink" title="打破壁垒"></a>打破壁垒</h1><p>在github上<a href="https://github.com/me-12/single-spa-portal-example" target="_blank" rel="noopener">single-spa-portal-example</a>,给出来一解决方案.</p><p>基于Redux实现前端微服务的消息总线(不会影响在编写代码的时候使用其他的状态管理工具).</p><p>大概思路是这样的:<br> <img src="https://github.com/me-12/single-spa-portal-example/raw/master/docs/inter-app-communication.jpg" alt=""></p><p>每一个模块,会对外提供一个 Store.js.这个文件<br>里面的内容,大致是这样的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  refresh: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'REFRESH'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state,</span><br><span class="line">        refresh: state.refresh + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外输出 Reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> storeInstance = createStore(combineReducers(&#123; <span class="attr">namespace</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'base'</span>, render &#125;))</span><br></pre></td></tr></table></figure><p>对于这样的代码,有没有很熟悉?<br>对,他就是一个普通的Reducer文件,<br>每一个模块对外输出的<code>Store.js</code>,就是一个模块的Reducer.</p><h1 id="Store-js-如何被使用"><a href="#Store-js-如何被使用" class="headerlink" title="Store.js 如何被使用?"></a>Store.js 如何被使用?</h1><p>我们需要在模块加载器中,导出这个Store.js</p><p>于是我们对模块加载器中的<code>Register.js</code>文件 (该文件在上一章出现过,不懂的同学可以往回看)</p><p>进行了以下改造:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> singleSpa <span class="keyword">from</span> <span class="string">'single-spa'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局的事件派发器 (新增)</span></span><br><span class="line"><span class="keyword">import</span> &#123; GlobalEventDistributor &#125; <span class="keyword">from</span> <span class="string">'./GlobalEventDistributor'</span> </span><br><span class="line"><span class="keyword">const</span> globalEventDistributor = <span class="keyword">new</span> GlobalEventDistributor();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// hash 模式,项目路由用的是hash模式会用到该函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hashPrefix</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pushState 模式</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pathPrefix</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用注册</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">registerApp</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 导入派发器</span></span><br><span class="line">    <span class="keyword">let</span> storeModule = &#123;&#125;, customProps = &#123; <span class="attr">globalEventDistributor</span>: globalEventDistributor &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里,我们会用SystemJS来导入模块的对外输出的Reducer(后续会被称作模块对外API),统一挂载到消息总线上</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        storeModule = params.store ? <span class="keyword">await</span> SystemJS.import(params.store) : &#123; <span class="attr">storeInstance</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Could not load store of app <span class="subst">$&#123;params.name&#125;</span>.`</span>, e);</span><br><span class="line">        <span class="comment">//如果失败则不注册该模块</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册应用于事件派发器</span></span><br><span class="line">    <span class="keyword">if</span> (storeModule.storeInstance &amp;&amp; globalEventDistributor) &#123;</span><br><span class="line">        <span class="comment">//取出 redux storeInstance</span></span><br><span class="line">        customProps.store = storeModule.storeInstance;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册到全局</span></span><br><span class="line">        globalEventDistributor.registerStore(storeModule.storeInstance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当与派发器一起组装成一个对象之后,在这里以这种形式传入每一个单独模块</span></span><br><span class="line">    customProps = &#123; <span class="attr">store</span>: storeModule, <span class="attr">globalEventDistributor</span>: globalEventDistributor &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在注册的时候传入 customProps</span></span><br><span class="line">    singleSpa.registerApplication(params.name, () =&gt; SystemJS.import(params.main), params.base ? <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="literal">true</span>) : pathPrefix(params), customProps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="全局派发器-GlobalEventDistributor"><a href="#全局派发器-GlobalEventDistributor" class="headerlink" title="全局派发器 GlobalEventDistributor"></a>全局派发器 GlobalEventDistributor</h1><p>全局派发器,主要的职责是触发各个模块对外的API.</p><p>GlobalEventDistributor.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalEventDistributor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">// 在函数实例化的时候,初始一个数组,保存所有模块的对外api</span></span><br><span class="line">        <span class="keyword">this</span>.stores = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册</span></span><br><span class="line">    registerStore(store) &#123;</span><br><span class="line">        <span class="keyword">this</span>.stores.push(store);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发,这个函数会被种到每一个模块当中.便于每一个模块可以调用其他模块的 api</span></span><br><span class="line">    <span class="comment">// 大致是每个模块都问一遍,是否有对应的事件触发.如果每个模块都有,都会被触发.</span></span><br><span class="line">    dispatch(event) &#123;</span><br><span class="line">        <span class="keyword">this</span>.stores.forEach(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">            s.dispatch(event)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有模块当前的对外状态</span></span><br><span class="line">    getState() &#123;</span><br><span class="line">        <span class="keyword">let</span> state = &#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.stores.forEach(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> currentState = s.getState();</span><br><span class="line">            <span class="built_in">console</span>.log(currentState)</span><br><span class="line">            state[currentState.namespace] = currentState</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在模块中接收派发器以及自己的Store"><a href="#在模块中接收派发器以及自己的Store" class="headerlink" title="在模块中接收派发器以及自己的Store"></a>在模块中接收派发器以及自己的Store</h1><p>上面提到,我们在应用注册的时候,传入了一个 <code>customProps</code>,里面包含了派发器以及store.<br>在每一个单独的模块中,我们如何接收并且使用传入的这些东西呢?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> singleSpaReact <span class="keyword">from</span> <span class="string">'single-spa-react'</span></span><br><span class="line"><span class="keyword">import</span> RootComponent <span class="keyword">from</span> <span class="string">'./root.component'</span></span><br><span class="line"><span class="keyword">import</span> &#123; storeInstance, history &#125; <span class="keyword">from</span> <span class="string">'./Store'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.less'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reactLifecycles = singleSpaReact(&#123;</span><br><span class="line">  React,</span><br><span class="line">  ReactDOM,</span><br><span class="line">  rootComponent: <span class="function">(<span class="params">spa</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 我们在创建生命周期的时候,把消息总线传入的东西,以props的形式传入组件当中</span></span><br><span class="line">    <span class="comment">// 这样,在每个模块中就可以直接调用跟查询其他模块的api与状态了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">RootComponent</span>  <span class="attr">store</span>=<span class="string">&#123;spa.customProps.store.storeInstance&#125;</span> <span class="attr">globalEventDistributor</span>=<span class="string">&#123;spa.customProps.globalEventDistributor&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  domElementGetter: () =&gt; document.getElementById('root')</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export const bootstrap = [</span></span><br><span class="line"><span class="xml">  reactLifecycles.bootstrap,</span></span><br><span class="line"><span class="xml">]</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export const mount = [</span></span><br><span class="line"><span class="xml">  reactLifecycles.mount,</span></span><br><span class="line"><span class="xml">]</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export const unmount = [</span></span><br><span class="line"><span class="xml">  reactLifecycles.unmount,</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure><blockquote><p>未完待续 …</p></blockquote><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><p><a href="http://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></p><p><a href="http://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></p><p><a href="http://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></p><p><a href="http://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></p><p><a href="http://alili.tech/archive/5ff0b366/">前端单页应用微服务化解决方案5 - 路由分发</a></p><p><a href="http://alili.tech/archive/ffb0c5ab/">前端单页应用微服务化解决方案6 - 构建与部署</a></p><p><a href="http://alili.tech/archive/5e00e43d/">前端单页应用微服务化解决方案7 - 静态数据共享</a></p><p><a href="http://alili.tech/archive/ce685b9f/">前端单页应用微服务化解决方案8 - 二次构建</a></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="http://microfrontend.alili.tech/" target="_blank" rel="noopener">前端微服务化 Micro Frontend Demo</a></p><p><a href="https://github.com/Fantasy9527/lotus-scaffold-micro-frontend-portal" target="_blank" rel="noopener">微前端模块加载器</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-base-demo" target="_blank" rel="noopener">微前端Base App示例源码</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-submodule-demo" target="_blank" rel="noopener">微前端子项目示例源码</a></p><blockquote><p>本文链接： <a href="https://alili.tech/archive/a9a1f81b/">https://alili.tech/archive/a9a1f81b/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></li><li><a href="https://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></li><li><a href="https://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></li><li><a href="https://alili.tech/archive/ffb0c5ab/">前端单页应用微服务化解决方案6 - 构建与部署</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;微前端的消息总线,主要的功能是搭建模块与模块之间通讯的桥梁.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;黑盒子&quot;&gt;&lt;a href=&quot;#黑盒子&quot; class=&quot;headerlink&quot; title=&quot;黑盒子&quot;&gt;&lt;/a&gt;黑盒子&lt;/h1&gt;&lt;h2 
      
    
    </summary>
    
    
      <category term="微前端" scheme="https://alili.tech/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端单页应用微服务化解决方案3 - 模块加载器</title>
    <link href="https://alili.tech/archive/1a60cede/"/>
    <id>https://alili.tech/archive/1a60cede/</id>
    <published>2018-09-02T16:00:00.000Z</published>
    <updated>2018-10-06T23:39:52.208Z</updated>
    
    <content type="html"><![CDATA[<p>微前端的模块加载器,主要功能为:</p><ul><li>项目配置文件的加载</li><li>项目对外接口文件的加载(消息总线会用到,后续会提)</li><li>项目入口文件的加载</li></ul><blockquote><p>以上也是每一个单模块,不可缺少的三部分</p></blockquote><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>我们实践微前端的过程中,我们对每个模块项目,都有一个对外的配置文件.<br>是模块在注册到singe-spa时候所用到的信息.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"name"</span>, <span class="comment">//模块名称</span></span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/project"</span>, <span class="comment">//模块url前缀</span></span><br><span class="line">    <span class="string">"prefix"</span>: <span class="string">"/module-prefix/"</span>, <span class="comment">//模块文件路径前缀</span></span><br><span class="line">    <span class="string">"main"</span>: <span class="string">"/module-prefix/main.js"</span>, <span class="comment">//模块渲染出口文件</span></span><br><span class="line">    <span class="string">"store"</span>: <span class="string">"/module-prefix/store.js"</span>,<span class="comment">//模块对外接口</span></span><br><span class="line">    <span class="string">"base"</span>: <span class="literal">true</span> </span><br><span class="line">    <span class="comment">// 当模块被定性为baseApp的时候,</span></span><br><span class="line">    <span class="comment">// 不管url怎么变化,项目也是会被渲染的,</span></span><br><span class="line">    <span class="comment">// 使用场景为,模块职责主要为整个框架的布局或者一直被渲染,不会改变的部分</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当我们的模块,有多种url前缀的时候,path也可以为数组形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"path"</span>: [<span class="string">"/project-url-path1/"</span>,<span class="string">"/project-url-path2/"</span>], <span class="comment">//项目url前缀</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="配置自动化"><a href="#配置自动化" class="headerlink" title="配置自动化"></a>配置自动化</h1><p>我们每个模块都有上面所描述的配置文件,当我们的项目多个模块的时候,我们需要把所有模块的配置文件聚合起来.<br>我这里也有写一个脚本.</p><p><a href="https://www.npmjs.com/package/micro-auto-config" target="_blank" rel="noopener">micro-auto-config</a></p><p>使用方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install micro-auto-config -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在项目根目录,用pm2启动该脚本,便可启动这个项目的配置自动化</span></span><br><span class="line">pm2 start micro-auto-config</span><br></pre></td></tr></table></figure><blockquote><p>大概思路是:当模块部署,服务器检测到项目文件发生改变,便开始找出所有模块的配置文件,把他们合并到一起.<br>以数组包对象的形式输出一个总体的新配置文件 <code>project.config.js</code>.<br>当我们一个模块配置有更新,部署到线上的时候,项目配置文件会自动更新.</p></blockquote><h2 id="模块加载器"><a href="#模块加载器" class="headerlink" title="模块加载器"></a>模块加载器</h2><p>这个文件直接引入到html中,也就是上一篇文章中的<code>single-spa-config.js</code> 升级版.<br>在加载模块的时候,我们使用SystemJS作为我们的模块加载工具.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'../libs/es6-promise.auto.min'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> singleSpa <span class="keyword">from</span> <span class="string">'single-spa'</span>; </span><br><span class="line"><span class="keyword">import</span> &#123; registerApp &#125; <span class="keyword">from</span> <span class="string">'./Register'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// project.config.js 文件为所有模块的配置集合</span></span><br><span class="line">    <span class="keyword">let</span> projectConfig = <span class="keyword">await</span> SystemJS.import(<span class="string">'/project.config.js'</span> )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历,注册所有模块</span></span><br><span class="line">    projectConfig.projects.forEach( <span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">        registerApp(&#123;</span><br><span class="line">            name: element.name,</span><br><span class="line">            main: element.main,</span><br><span class="line">            url: element.prefix,</span><br><span class="line">            store:element.store,</span><br><span class="line">            base: element.base,</span><br><span class="line">            path: element.path</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 项目启动</span></span><br><span class="line">    singleSpa.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bootstrap()</span><br></pre></td></tr></table></figure><h3 id="Register-js"><a href="#Register-js" class="headerlink" title="Register.js"></a>Register.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'../libs/system'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../libs/es6-promise.auto.min'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> singleSpa <span class="keyword">from</span> <span class="string">'single-spa'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hash 模式,项目路由用的是hash模式会用到该函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hashPrefix</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">location</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> isShow = <span class="literal">false</span></span><br><span class="line">        <span class="comment">//如果该应用 有多个需要匹配的路劲</span></span><br><span class="line">        <span class="keyword">if</span>(isArray(app.path))&#123;</span><br><span class="line">            app.path.forEach(<span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(location.hash.startsWith(<span class="string">`#<span class="subst">$&#123;path&#125;</span>`</span>))&#123;</span><br><span class="line">                    isShow = <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 普通情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(location.hash.startsWith(<span class="string">`#<span class="subst">$&#123;app.path || app.url&#125;</span>`</span>))&#123;</span><br><span class="line">            isShow = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isShow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pushState 模式</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pathPrefix</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">location</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> isShow = <span class="literal">false</span></span><br><span class="line">        <span class="comment">//如果该模块 有多个需要匹配的路径</span></span><br><span class="line">        <span class="keyword">if</span>(isArray(app.path))&#123;</span><br><span class="line">            app.path.forEach(<span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(location.pathname.indexOf(<span class="string">`<span class="subst">$&#123;path&#125;</span>`</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">                    isShow = <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 普通情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(location.pathname.indexOf(<span class="string">`<span class="subst">$&#123;app.path || app.url&#125;</span>`</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">            isShow = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isShow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用注册</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">registerApp</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    singleSpa.registerApplication(params.name, () =&gt; SystemJS.import(params.main), params.base ? <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="literal">true</span>) : pathPrefix(params));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组判断 用于判断是否有多个url前缀</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o)==<span class="string">'[object Array]'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>未完待续 …</p></blockquote><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><p><a href="http://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></p><p><a href="http://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></p><p><a href="http://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></p><p><a href="http://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></p><p><a href="http://alili.tech/archive/5ff0b366/">前端单页应用微服务化解决方案5 - 路由分发</a></p><p><a href="http://alili.tech/archive/ffb0c5ab/">前端单页应用微服务化解决方案6 - 构建与部署</a></p><p><a href="http://alili.tech/archive/5e00e43d/">前端单页应用微服务化解决方案7 - 静态数据共享</a></p><p><a href="http://alili.tech/archive/ce685b9f/">前端单页应用微服务化解决方案8 - 二次构建</a></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="http://microfrontend.alili.tech/" target="_blank" rel="noopener">前端微服务化 Micro Frontend Demo</a></p><p><a href="https://github.com/Fantasy9527/lotus-scaffold-micro-frontend-portal" target="_blank" rel="noopener">微前端模块加载器</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-base-demo" target="_blank" rel="noopener">微前端Base App示例源码</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-submodule-demo" target="_blank" rel="noopener">微前端子项目示例源码</a></p><blockquote><p>本文链接： <a href="https://alili.tech/archive/1a60cede/">https://alili.tech/archive/1a60cede/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></li><li><a href="https://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></li><li><a href="https://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></li><li><a href="https://alili.tech/archive/ffb0c5ab/">前端单页应用微服务化解决方案6 - 构建与部署</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微前端的模块加载器,主要功能为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目配置文件的加载&lt;/li&gt;
&lt;li&gt;项目对外接口文件的加载(消息总线会用到,后续会提)&lt;/li&gt;
&lt;li&gt;项目入口文件的加载&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;以上也是每一个单模块,不可缺少的
      
    
    </summary>
    
    
      <category term="微前端" scheme="https://alili.tech/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端单页应用微服务化解决方案2 - Single-SPA</title>
    <link href="https://alili.tech/archive/11052bf4/"/>
    <id>https://alili.tech/archive/11052bf4/</id>
    <published>2018-09-02T14:17:36.000Z</published>
    <updated>2018-10-06T23:39:52.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p>经过各种技术调研我们最终选择的方案是基于 <a href="https://single-spa.js.org/" target="_blank" rel="noopener">Single-SPA</a> 来实现我们的前端微服务化.</p><video style="width:100%" src="https://alili.tech/data/video/Single-Spa%20Intro.mp4" controls="controls"><br>你的浏览器不支持视频<br></video><h1 id="Single-SPA"><a href="#Single-SPA" class="headerlink" title="Single-SPA"></a>Single-SPA</h1><blockquote><p>一个用于前端微服务化的JavaScript前端解决方案</p></blockquote><p> 使用Single-SPA之后,你可以这样做:</p><ul><li>(兼容各种技术栈)在同一个页面中使用多种技术框架(React, Vue, AngularJS, Angular, Ember等任意技术框架),并且不需要刷新页面.</li><li>(无需重构现有代码)使用新的技术框架编写代码,现有项目中的代码无需重构.</li><li>(更优的性能)每个独立模块的代码可做到按需加载,不浪费额外资源.</li><li>每个独立模块可独立运行.</li></ul><p>下面是一个微前端的演示页面 (你可能需要科学的上网)<br> <a href="https://single-spa.surge.sh/" target="_blank" rel="noopener">https://single-spa.surge.sh/</a></p><blockquote><p>以上是官方例子,但是官方例子中并没有解决一个问题.就是各种技术栈的路由实现方式大相径庭,如何做到路由之间的协同?<br>后续文章会讲解,如何解决这样的问题.</p></blockquote><h2 id="单体应用对比前端微服务化"><a href="#单体应用对比前端微服务化" class="headerlink" title="单体应用对比前端微服务化"></a>单体应用对比前端微服务化</h2><h3 id="普通的前端单体应用"><a href="#普通的前端单体应用" class="headerlink" title="普通的前端单体应用"></a>普通的前端单体应用</h3><p><img src="https://alili.tech/images/micro/current.png" alt=""></p><h3 id="微前端架构"><a href="#微前端架构" class="headerlink" title="微前端架构"></a>微前端架构</h3><p><img src="https://alili.tech/images/micro/mf.png" alt=""></p><h1 id="Single-SPA的简单用法"><a href="#Single-SPA的简单用法" class="headerlink" title="Single-SPA的简单用法"></a>Single-SPA的简单用法</h1><h2 id="1-创建一个HTML文件"><a href="#1-创建一个HTML文件" class="headerlink" title="1.创建一个HTML文件"></a>1.创建一个HTML文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"single-spa-config.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-创建single-spa-config-js-文件"><a href="#2-创建single-spa-config-js-文件" class="headerlink" title="2.创建single-spa-config.js 文件"></a>2.创建single-spa-config.js 文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// single-spa-config.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> singleSpa <span class="keyword">from</span> <span class="string">'single-spa'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载react 项目的入口js文件 (模块加载)</span></span><br><span class="line"><span class="keyword">const</span> loadingFunction = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./react/app.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当url前缀为 /react的时候.返回 true (底层路由)</span></span><br><span class="line"><span class="keyword">const</span> activityFunction = <span class="function"><span class="params">location</span> =&gt;</span> location.pathname.startsWith(<span class="string">'/react'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册应用 </span></span><br><span class="line">singleSpa.registerApplication(<span class="string">'react'</span>, loadingFunction, activityFunction);</span><br><span class="line"></span><br><span class="line"><span class="comment">//singleSpa 启动</span></span><br><span class="line">singleSpa.start();</span><br></pre></td></tr></table></figure><h2 id="封装React项目的渲染出口文件"><a href="#封装React项目的渲染出口文件" class="headerlink" title="封装React项目的渲染出口文件"></a>封装React项目的渲染出口文件</h2><p>我们把渲染react的入口文件修改成这样,便可接入到single-spa</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> singleSpaReact <span class="keyword">from</span> <span class="string">'single-spa-react'</span></span><br><span class="line"><span class="keyword">import</span> RootComponent <span class="keyword">from</span> <span class="string">'./root.component'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">  <span class="comment">// 开发环境直接渲染</span></span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">RootComponent</span> /&gt;</span>, document.getElementById('root'))</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">//创建生命周期实例</span></span><br><span class="line"><span class="xml">const reactLifecycles = singleSpaReact(&#123;</span></span><br><span class="line"><span class="xml">  React,</span></span><br><span class="line"><span class="xml">  ReactDOM,</span></span><br><span class="line"><span class="xml">  rootComponent: RootComponent</span></span><br><span class="line"><span class="xml">  domElementGetter: () =&gt; document.getElementById('root')</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 项目启动的钩子</span></span><br><span class="line"><span class="xml">export const bootstrap = [</span></span><br><span class="line"><span class="xml">  reactLifecycles.bootstrap,</span></span><br><span class="line"><span class="xml">]</span></span><br><span class="line"><span class="xml">// 项目启动后的钩子</span></span><br><span class="line"><span class="xml">export const mount = [</span></span><br><span class="line"><span class="xml">  reactLifecycles.mount,</span></span><br><span class="line"><span class="xml">]</span></span><br><span class="line"><span class="xml">// 项目卸载的钩子</span></span><br><span class="line"><span class="xml">export const unmount = [</span></span><br><span class="line"><span class="xml">  reactLifecycles.unmount,</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure><blockquote><p>这就是 single-spa的简单使用,<br>当我们的浏览器url的前缀有<code>/react</code>的时候,程序就可以正常渲染这个应用<br>所以,所以我们这个react应用的所有路由前缀都得有<code>/react</code><br>未完待续 …</p></blockquote><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><p><a href="http://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></p><p><a href="http://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></p><p><a href="http://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></p><p><a href="http://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></p><p><a href="http://alili.tech/archive/5ff0b366/">前端单页应用微服务化解决方案5 - 路由分发</a></p><p><a href="http://alili.tech/archive/ffb0c5ab/">前端单页应用微服务化解决方案6 - 构建与部署</a></p><p><a href="http://alili.tech/archive/5e00e43d/">前端单页应用微服务化解决方案7 - 静态数据共享</a></p><p><a href="http://alili.tech/archive/ce685b9f/">前端单页应用微服务化解决方案8 - 二次构建</a></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="http://microfrontend.alili.tech/" target="_blank" rel="noopener">前端微服务化 Micro Frontend Demo</a></p><p><a href="https://github.com/Fantasy9527/lotus-scaffold-micro-frontend-portal" target="_blank" rel="noopener">微前端模块加载器</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-base-demo" target="_blank" rel="noopener">微前端Base App示例源码</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-submodule-demo" target="_blank" rel="noopener">微前端子项目示例源码</a></p><blockquote><p>本文链接： <a href="https://alili.tech/archive/11052bf4/">https://alili.tech/archive/11052bf4/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></li><li><a href="https://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></li><li><a href="https://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></li><li><a href="https://alili.tech/archive/ffb0c5ab/">前端单页应用微服务化解决方案6 - 构建与部署</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;技术选型&quot;&gt;&lt;a href=&quot;#技术选型&quot; class=&quot;headerlink&quot; title=&quot;技术选型&quot;&gt;&lt;/a&gt;技术选型&lt;/h1&gt;&lt;p&gt;经过各种技术调研我们最终选择的方案是基于 &lt;a href=&quot;https://single-spa.js.org/&quot; targ
      
    
    </summary>
    
    
      <category term="微前端" scheme="https://alili.tech/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端单页应用微服务化解决方案1 - 思考</title>
    <link href="https://alili.tech/archive/ea599f7c/"/>
    <id>https://alili.tech/archive/ea599f7c/</id>
    <published>2018-09-01T14:17:36.000Z</published>
    <updated>2018-10-06T23:40:07.773Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>近几年,微服务架构在后端技术社区大红大紫,它被认为是IT软件架构的未来技术方向.我们如何借鉴后端微服务的思想来构建一个现代化前端应用?<br>在这里我提供一个可以在产品中真正可以落地的前端微服务解决方案.</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2017/12/27/16098869b848027e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h1 id="微服务化后端前后端对比"><a href="#微服务化后端前后端对比" class="headerlink" title="微服务化后端前后端对比"></a>微服务化后端前后端对比</h1><h2 id="后端微服务化的优势"><a href="#后端微服务化的优势" class="headerlink" title="后端微服务化的优势:"></a>后端微服务化的优势:</h2><ol><li>复杂度可控: 体积小、复杂度低，每个微服务可由一个小规模开发团队完全掌控，易于保持高可维护性和开发效率。</li><li>独立部署: 由于微服务具备独立的运行进程，所以每个微服务也可以独立部署。</li><li>技术选型灵活: 微服务架构下，技术选型是去中心化的。每个团队可以根据自身服务的需求和行业发展的现状，自由选择最适合的技术栈。</li><li>容错: 当某一组建发生故障时，在单一进程的传统架构下，故障很有可能在进程内扩散，形成应用全局性的不可用。</li><li>扩展: 单块架构应用也可以实现横向扩展，就是将整个应用完整的复制到不同的节点。</li></ol><h2 id="前端微服务化后的优势"><a href="#前端微服务化后的优势" class="headerlink" title="前端微服务化后的优势:"></a>前端微服务化后的优势:</h2><ol><li>复杂度可控: 每一个UI业务模块由独立的前端团队开发,避免代码巨无霸,保持开发时的高速编译,保持较低的复杂度,便于维护与开发效率。</li><li>独立部署: 每一个模块可单独部署,颗粒度可小到单个组件的UI独立部署,不对其他模块有任何影响。</li><li>技术选型灵活: 也是最具吸引力的,在同一项目下可以使用如今市面上所有前端技术栈,也包括未来的前端技术栈。</li><li>容错: 单个模块发生错误,不影响全局。</li><li>扩展: 每一个服务可以独立横向扩展以满足业务伸缩性，与资源的不必要消耗；</li></ol><h1 id="我们何时需要前端微服务化"><a href="#我们何时需要前端微服务化" class="headerlink" title="我们何时需要前端微服务化?"></a>我们何时需要前端微服务化?</h1><ol><li>项目技术栈过于老旧,相关技能的开发人员少,功能扩展吃力,重构成本高,维护成本高.</li><li>项目过于庞大,代码编译慢,开发体差,需要一种更高维度的解耦方案.</li><li>单一技术栈无法满足你的业务需求</li></ol><h1 id="其中面临的问题与挑战"><a href="#其中面临的问题与挑战" class="headerlink" title="其中面临的问题与挑战"></a>其中面临的问题与挑战</h1><p>我们即将面临以下问题:</p><ul><li>我们如何实现在一个页面里渲染多种技术栈?</li><li>不同技术栈的独立模块之间如何通讯?</li><li>如何通过路由渲染到正确的模块?</li><li>在不同技术栈之间的路由该如何正确触发?</li><li>项目代码别切割之后,通过何种方式合并到一起?</li><li>我们的每一个模块项目如何打包?</li><li>前端微服务化后我们该如何编写我们的代码?</li><li>独立团队之间该如何协作?</li></ul><blockquote><p>后续的文章我会一一解答以上问题,一起挖掘前端微服务的潜力.<br>跳出概念,实实在在的落地到你的项目中.<br>未完待续 …</p></blockquote><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><p><a href="http://alili.tech/archive/ea599f7c/">前端单页应用微服务化解决方案1 - 思考</a></p><p><a href="http://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></p><p><a href="http://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></p><p><a href="http://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></p><p><a href="http://alili.tech/archive/5ff0b366/">前端单页应用微服务化解决方案5 - 路由分发</a></p><p><a href="http://alili.tech/archive/ffb0c5ab/">前端单页应用微服务化解决方案6 - 构建与部署</a></p><p><a href="http://alili.tech/archive/5e00e43d/">前端单页应用微服务化解决方案7 - 静态数据共享</a></p><p><a href="http://alili.tech/archive/ce685b9f/">前端单页应用微服务化解决方案8 - 二次构建</a></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="http://microfrontend.alili.tech/" target="_blank" rel="noopener">前端微服务化 Micro Frontend Demo</a></p><p><a href="https://github.com/Fantasy9527/lotus-scaffold-micro-frontend-portal" target="_blank" rel="noopener">微前端模块加载器</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-base-demo" target="_blank" rel="noopener">微前端Base App示例源码</a></p><p><a href="https://github.com/Fantasy9527/microfrontend-submodule-demo" target="_blank" rel="noopener">微前端子项目示例源码</a></p><blockquote><p>本文链接： <a href="https://alili.tech/archive/ea599f7c/">https://alili.tech/archive/ea599f7c/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/11052bf4/">前端单页应用微服务化解决方案2 - Single-SPA</a></li><li><a href="https://alili.tech/archive/1a60cede/">前端单页应用微服务化解决方案3 - 模块加载器</a></li><li><a href="https://alili.tech/archive/a9a1f81b/">前端单页应用微服务化解决方案4 - 消息总线</a></li><li><a href="https://alili.tech/archive/ffb0c5ab/">前端单页应用微服务化解决方案6 - 构建与部署</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;近几年,微服务架构在后端技术社区大红大紫,它被认为是IT软件架构的未来技术方向.我们如何借鉴后端微服务的思想来构建一个现代化前端应用?&lt;br&gt;在这里我提供一个可以在产品中真正可以落地的前端微服务解决方案.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="微前端" scheme="https://alili.tech/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>2018年09月国内浏览器数据统计</title>
    <link href="https://alili.tech/archive/c25273ee/"/>
    <id>https://alili.tech/archive/c25273ee/</id>
    <published>2018-08-31T16:00:00.000Z</published>
    <updated>2018-10-06T22:55:41.189Z</updated>
    
    <content type="html"><![CDATA[<div id="echarts5885" style="width: 100%;height: 400px;margin: 0 auto"></div><script src="https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js"></script><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts5885'));        // 指定图表的配置项和数据        var option = {"textStyle":{"color":"#fff"},"title":{"text":"2018年09月国内浏览器数据统计","subtext":"浏览器数据分析","x":"center","textStyle":{"color":"#fff"}},"tooltip":{"trigger":"item","formatter":"{a} <br/>{b} : {c} ({d}%)"},"legend":{"type":"scroll","orient":"vertical","right":10,"top":120,"bottom":20,"data":["Chrome","IE 9.0","QQ","2345","IE 11.0","IE 8.0","搜狗高速","Safari","IE 7.0","其他"],"textStyle":{"color":"#fff"}},"series":[{"name":"浏览器用户比例","type":"pie","radius":"55%","center":["50%","60%"],"data":[{"name":"Chrome","value":46.83},{"name":"IE 9.0","value":8.74},{"name":"QQ","value":6.01},{"name":"2345","value":5.94},{"name":"IE 11.0","value":5.62},{"name":"IE 8.0","value":5.59},{"name":"搜狗高速","value":4.57},{"name":"Safari","value":2.44},{"name":"IE 7.0","value":2.35},{"name":"其他","value":11.91}],"itemStyle":{"emphasis":{"shadowBlur":10,"shadowOffsetX":0,"shadowColor":"rgba(0, 0, 0, 0.5)"}}}]}        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><blockquote><p>本文链接： <a href="https://alili.tech/archive/c25273ee/">https://alili.tech/archive/c25273ee/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/4a50d81d/">2018年10月国内浏览器数据统计</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;echarts5885&quot; style=&quot;width: 100%;height: 400px;margin: 0 auto&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://cdn.bootcss.com/echarts/3.8.0/echarts.com
      
    
    </summary>
    
    
      <category term="Data analysis" scheme="https://alili.tech/tags/Data-analysis/"/>
    
  </entry>
  
  <entry>
    <title>Network笔记整理 - 网络协议与网络分层</title>
    <link href="https://alili.tech/archive/ef96a5b6/"/>
    <id>https://alili.tech/archive/ef96a5b6/</id>
    <published>2018-08-29T16:00:00.000Z</published>
    <updated>2018-10-06T23:12:25.053Z</updated>
    
    <content type="html"><![CDATA[<p>《圣经》中有一个通天塔的故事,上帝为了阻止人类联合起来，就让人类说不同的语言。人类没法儿沟通，达不成“协议”，通天塔的计划就失败了。</p><p>千年之后,一群工程师为了解决这一问题,制定了各种协议与标准,让各种设备可以通过协议通信,进而通过互联网实现了让世界互联.</p><p>就像我们现在写的代码,用着通用的程序语言,世界也就随之打通了.我们的计算机语言也算是一种协议.</p><p>想要让世界互联,让计算机们都联合起来,就必须要用到网络协议让他们相互协作,来完成共同的目标.</p><h2 id="协议三要素"><a href="#协议三要素" class="headerlink" title="协议三要素"></a>协议三要素</h2><p>(1) 语义。每一段内容需要代表某种意义<br>(2) 语法。每一段内容符合一定规则的格式,<br>(3) 时序。每一段任务的执行顺序.</p><h2 id="网络分层"><a href="#网络分层" class="headerlink" title="网络分层"></a>网络分层</h2><p>网络分层就是将网络节点所要完成的数据的发送或转发、打包或拆包，控制信息的加载或拆出等工作，分别由不同的硬件和软件模块去完成。</p><p>简单的来说一个完整的HTTP请求,途中需要经过数次传送,期间需要不通的都软件与硬件模块去完成相应的工作.<br>我们对相应的阶段的不通特性做出来相应的分类.每种网络分层,都有相应的协议标准做数据传送.</p><p>就像是一家公司,不通层级的人会用着不通的沟通方式来打交道.网络也大概如此.</p><h2 id="我们常用的网络协议有哪些-我们的网络在通讯过程中-要通过哪些设备-哪些协议才能做到一次完整的通讯"><a href="#我们常用的网络协议有哪些-我们的网络在通讯过程中-要通过哪些设备-哪些协议才能做到一次完整的通讯" class="headerlink" title="我们常用的网络协议有哪些? 我们的网络在通讯过程中,要通过哪些设备,哪些协议才能做到一次完整的通讯?"></a>我们常用的网络协议有哪些? 我们的网络在通讯过程中,要通过哪些设备,哪些协议才能做到一次完整的通讯?</h2><p>网络层次可划分为五层因特网协议栈和七层因特网协议栈</p><h3 id="五层模型"><a href="#五层模型" class="headerlink" title="五层模型"></a>五层模型</h3><p>因特网协议栈共有五层：应用层、传输层、网络层、链路层和物理层。不同于OSI七层模型这也是实际使用中使用的分层方式。<br>（1）应用层<br>支持网络应用，应用协议仅仅是网络应用的一个组成部分，运行在不同主机上的进程则使用应用层协议进行通信。<br>（2）传输层<br>负责为信源和信宿提供应用程序进程间的数据传输服务，这一层上主要定义了两个传输协议，传输控制协议即TCP和用户数据报协议UDP。<br>（3）网络层<br>负责将数据报独立地从信源发送到信宿，主要解决路由选择、拥塞控制和网络互联等问题。<br>（4）数据链路层<br>负责将IP数据报封装成合适在物理网络上传输的帧格式并传输，或将从物理网络接收到的帧解封，取出IP数据报交给网络层。<br>（5）物理层<br>负责将比特流在结点间传输，即负责物理传输。该层的协议既与链路有关也与传输介质有关</p><h3 id="五层模型对应的协议"><a href="#五层模型对应的协议" class="headerlink" title="五层模型对应的协议"></a>五层模型对应的协议</h3><p>物理层：以太网 · 调制解调器 · 电力线通信(PLC) · SONET/SDH · G.709 · 光导纤维 · 同轴电缆 · 双绞线等</p><p>数据链路层：Wi-Fi(IEEE 802.11) · WiMAX(IEEE 802.16) ·ATM · DTM · 令牌环 · 以太网 ·FDDI · 帧中继 · GPRS · EVDO ·HSPA · HDLC · PPP · L2TP ·PPTP · ISDN·STP 等</p><p>网络层协议：IP (IPv4 · IPv6) · ICMP· ICMPv6·IGMP ·IS-IS · IPsec · ARP · RARP等</p><p>传输层协议：TCP · UDP · TLS · DCCP · SCTP · RSVP · OSPF 等</p><p>应用层协议：DHCP ·DNS · FTP · Gopher · HTTP· IMAP4 · IRC · NNTP · XMPP ·POP3 · SIP · SMTP ·SNMP · SSH ·TELNET · RPC · RTCP · RTP ·RTSP· SDP · SOAP · GTP · STUN · NTP· SSDP · BGP · RIP 等</p><h3 id="七层模型"><a href="#七层模型" class="headerlink" title="七层模型"></a>七层模型</h3><h4 id="第一层-－-物理层"><a href="#第一层-－-物理层" class="headerlink" title="第一层 － 物理层"></a>第一层 － 物理层</h4><p>功能：传输信息的介质规格、将数据以实体呈现并传输的规格、接头规格　</p><p>1、该层包括物理连网媒介，如电缆连线、连接器、网卡等。　</p><p>2、物理层的协议产生并检测电压以便发送和接收携带数据的信号。　</p><p>3、尽管物理层不提供纠错服务，但它能够设定数据传输速率并监测数　</p><p>例：在你的桌面P C 上插入网络接口卡，你就建立了计算机连网的基础。换言之，你提供了一个物理层。</p><h4 id="第二层-－-数据链路层"><a href="#第二层-－-数据链路层" class="headerlink" title="第二层 － 数据链路层"></a>第二层 － 数据链路层</h4><p>功能：同步、查错、制定MAC方法　</p><p>1、它的主要功能是将从网络层接收到的数据分割成特定的可被物理层传输的帧。　</p><p>2、帧(Frame)是用来移动数据的结构包，它不仅包括原始（未加工）数据，或称“有效荷载”，还包括发送方和接收方的网络地址以及纠错和控制信息。其中的地址确定了帧将发送到何处，而纠错和控制信息则确保帧无差错到达。　</p><p>3、通常，发送方的数据链路层将等待来自接收方对数据已正确接收的应答信号。　</p><p>4、数据链路层控制信息流量，以允许网络接口卡正确处理数据。　</p><p>5、数据链路层的功能独立于网络和它的节点所采用的物理层类型。　</p><p>Note：有一些连接设备，如网桥或交换机，由于它们要对帧解码并使用帧信息将数据发送到正确的接收方，所以它们是工作在数据链路层的。</p><h4 id="第三层-－-网络层"><a href="#第三层-－-网络层" class="headerlink" title="第三层 － 网络层"></a>第三层 － 网络层</h4><p>功能：定址、选择传送路径　</p><p>1、网络层通过综合考虑发送优先权、网络拥塞程度、服务质量以及可选路由的花费来决定从一个网络中节点A 到另一个网络中节点B 的最佳路径。　</p><p>2、在网络中，“路由”是基于编址方案、使用模式以及可达性来指引数据的发送。　</p><p>3、网络层协议还能补偿数据发送、传输以及接收的设备能力的不平衡性。为完成这一任务，网络层对数据包进行分段和重组。　</p><p>4、分段和重组 是指当数据从一个能处理较大数据单元的网络段传送到仅能处理较小数据单元的网络段时，网络层减小数据单元的大小的过程。重组是重构被分段的数据单元。　<br>Note 1、网络层的分段是指数据帧大小的减小，而网络分段是指一个网络分割成更小的逻辑片段或物理片段。　</p><p>Note 2、路由器：由于网络层处理路由，而路由器因为连接网络各段，并智能指导数据传送，所以属于网络层。　Note 3、 TCP/IP协议中IP属于网络层；IPX/SPX协议中IPX也属于网络层</p><h4 id="第四层-－-传输层"><a href="#第四层-－-传输层" class="headerlink" title="第四层 － 传输层"></a>第四层 － 传输层</h4><p>功能：编定序号、控制数据流量、查错与错误处理，确保数据可靠、顺序、无错地从A点到传输到B 点　</p><p>1、因为如果没有传输层，数据将不能被接受方验证或解释，所以，传输层常被认为是O S I 模型中最重要的一层。　</p><p>2、传输协议同时进行流量控制或是基于接收方可接收数据的快慢程度规定适当的发送速率。　</p><p>3、传输层按照网络能处理的最大尺寸将较长的数据包进行强制分割并编号。例如：以太网无法接收大于1 5 0 0 字节的数据包。发送方节点的传输层将数据分割成较小的数据片，同时对每一数据片安排一序列号，以便数据到达接收方节点的传输层时，能以正确的顺序重组。该过程即被称为排序。　</p><p>4、在网络中，传输层发送一个A C K （应答）信号以通知发送方数据已被正确接收。如果数据有错或者数据在一给定时间段未被应答，传输层将请求发送方重新发送数据。　NOTE：工作在传输层的一种服务是TCP/IP协议套中的T C P（Transfer Control Protocol 传输控制协议），另一项传输层服务是IPX/SPX协议集的S P X（ Serial package Exchange 序列包交换）</p><h4 id="第五层-－-会话层"><a href="#第五层-－-会话层" class="headerlink" title="第五层 － 会话层"></a>第五层 － 会话层</h4><p>功能：负责在网络中的两节点之间建立和维持通信。　</p><p>1、会话层的功能包括：建立通信链接，保持会话过程通信链接的畅通，同步两个节点之间的对话，决定通信是否被中断以及通信中断时决定从何处重新发送　例：使用全双工模式或半双工模式，如何发起传输，如何结束传输，如何设定传输参数　</p><p>2、会话层通过决定节点通信的优先级和通信时间的长短来设置通信期限。</p><h4 id="第六层-－-表示层"><a href="#第六层-－-表示层" class="headerlink" title="第六层 － 表示层"></a>第六层 － 表示层</h4><p>功能：内码转换、压缩与解压缩、加密与解密,充当应用程序和网络之间的“翻译官”角色。</p><p>1、在表示层，数据将按照网络能理解的方案进行格式化；这种格式化也因所使用网络的类型不同而不同。例如，IBM主机使用EBCDIC编码，而大部分PC机使用的是ASCII码。在这种情况下，便需要会话层来完成这种转换　</p><p>2、表示层协议还对图片和文件格式信息进行解码和编码。　</p><p>3、表示层管理数据的解密与加密，如系统口令的处理。如果在Internet 上查询你银行账户，使用的即是一种安全连接。 </p><h4 id="第七层-－-应用层"><a href="#第七层-－-应用层" class="headerlink" title="第七层 － 应用层"></a>第七层 － 应用层</h4><p>功能：指网络操作系统和具体的应用程序，对应WWW服务器、FTP服务器等应用软件　</p><p>1、术语“应用层”并不是指运行在网络上的某个特别应用程序，而是提供了一组方便程序开发者在自己的应用程序中使用网络功能的服务。　</p><p>2、应用层提供的服务包括文件传输（FTP）、文件管理以及电子邮件的信息处理（SMTP）等。</p><h3 id="比喻"><a href="#比喻" class="headerlink" title="比喻"></a>比喻</h3><p>像发快递的过程（http，应用层)，<br>你向顺丰下单(第一次请求),<br>顺丰接单(应答),<br>你向手机小伙联系(回应应答)，<br>你将消息放进盒子里(开始封装请求，会话层)，<br>快递员封装一层盒子贴上快递单带回网店(传输层），<br>到快递点检查是否区域快件（网络层），<br>各个快递转运中心（物理层），<br>快件到达收件市转运中心（物理层），<br>转运输车（链路层），<br>到达区域分发（网络层），<br>网点派送（传输层），<br>快递员方面签收（会话层），<br>拆开检查（表示层），<br>收到快递（应用层）。</p><blockquote><p>本文链接： <a href="https://alili.tech/archive/ef96a5b6/">https://alili.tech/archive/ef96a5b6/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/df8d5e8d/">利用ngrok给你的机器打个洞 - 内网穿透</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《圣经》中有一个通天塔的故事,上帝为了阻止人类联合起来，就让人类说不同的语言。人类没法儿沟通，达不成“协议”，通天塔的计划就失败了。&lt;/p&gt;
&lt;p&gt;千年之后,一群工程师为了解决这一问题,制定了各种协议与标准,让各种设备可以通过协议通信,进而通过互联网实现了让世界互联.&lt;/p
      
    
    </summary>
    
    
      <category term="Network" scheme="https://alili.tech/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>2018年08月Github Javascript趋势收集</title>
    <link href="https://alili.tech/archive/c4353316/"/>
    <id>https://alili.tech/archive/c4353316/</id>
    <published>2018-08-08T16:00:00.000Z</published>
    <updated>2018-10-06T23:03:49.385Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/github_11.png" alt=""></p><h2 id="felixrieseberg-windows95"><a href="#felixrieseberg-windows95" class="headerlink" title="felixrieseberg / windows95 :"></a><a href="https://github.com/felixrieseberg/windows95" target="_blank" rel="noopener">felixrieseberg / windows95</a> :</h2><p>10,485 stars this month</p><p>💩🚀 Windows 95 in Electron. Runs on macOS, Linux, and Windows. </p><hr><h2 id="trekhleb-javascript-algorithms"><a href="#trekhleb-javascript-algorithms" class="headerlink" title="trekhleb / javascript-algorithms :"></a><a href="https://github.com/trekhleb/javascript-algorithms" target="_blank" rel="noopener">trekhleb / javascript-algorithms</a> :</h2><p>5,249 stars this month</p><p>Algorithms and data structures implemented in JavaScript with explanations and links to further readings </p><hr><h2 id="klauscfhq-taskbook"><a href="#klauscfhq-taskbook" class="headerlink" title="klauscfhq / taskbook :"></a><a href="https://github.com/klauscfhq/taskbook" target="_blank" rel="noopener">klauscfhq / taskbook</a> :</h2><p>4,754 stars this month</p><p>📓 Tasks, boards &amp; notes for the command-line habitat </p><hr><h2 id="vuejs-vue"><a href="#vuejs-vue" class="headerlink" title="vuejs / vue :"></a><a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vuejs / vue</a> :</h2><p>3,740 stars this month</p><p>🖖 A progressive, incrementally-adoptable JavaScript framework for building UI on the web. </p><hr><h2 id="jxnblk-mdx-deck"><a href="#jxnblk-mdx-deck" class="headerlink" title="jxnblk / mdx-deck :"></a><a href="https://github.com/jxnblk/mdx-deck" target="_blank" rel="noopener">jxnblk / mdx-deck</a> :</h2><p>3,188 stars this month</p><p>♠️ MDX-based presentation decks </p><hr><h2 id="apexcharts-apexcharts-js"><a href="#apexcharts-apexcharts-js" class="headerlink" title="apexcharts / apexcharts.js :"></a><a href="https://github.com/apexcharts/apexcharts.js" target="_blank" rel="noopener">apexcharts / apexcharts.js</a> :</h2><p>3,065 stars this month</p><p>📊 Interactive and Modern SVG Charts </p><hr><h2 id="checkly-puppeteer-recorder"><a href="#checkly-puppeteer-recorder" class="headerlink" title="checkly / puppeteer-recorder :"></a><a href="https://github.com/checkly/puppeteer-recorder" target="_blank" rel="noopener">checkly / puppeteer-recorder</a> :</h2><p>3,026 stars this month</p><p>Puppeteer recorder is a Chrome extension that records your browser interactions and generates a Puppeteer script. </p><hr><h2 id="facebook-react"><a href="#facebook-react" class="headerlink" title="facebook / react :"></a><a href="https://github.com/facebook/react" target="_blank" rel="noopener">facebook / react</a> :</h2><p>2,739 stars this month</p><p>A declarative, efficient, and flexible JavaScript library for building user interfaces. </p><hr><h2 id="faressoft-terminalizer"><a href="#faressoft-terminalizer" class="headerlink" title="faressoft / terminalizer :"></a><a href="https://github.com/faressoft/terminalizer" target="_blank" rel="noopener">faressoft / terminalizer</a> :</h2><p>2,970 stars this month</p><p>🦄 Record your terminal and generate animated gif images </p><hr><h2 id="antvis-f2"><a href="#antvis-f2" class="headerlink" title="antvis / f2 :"></a><a href="https://github.com/antvis/f2" target="_blank" rel="noopener">antvis / f2</a> :</h2><p>2,834 stars this month</p><p>📱📈An elegant, interactive and flexible charting library for mobile. </p><hr><h2 id="copy-v86"><a href="#copy-v86" class="headerlink" title="copy / v86 :"></a><a href="https://github.com/copy/v86" target="_blank" rel="noopener">copy / v86</a> :</h2><p>2,129 stars this month</p><p>x86 virtualization in JavaScript, running in your browser and NodeJS </p><hr><h2 id="facebook-create-react-app"><a href="#facebook-create-react-app" class="headerlink" title="facebook / create-react-app :"></a><a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">facebook / create-react-app</a> :</h2><p>1,694 stars this month</p><p>Create React apps with no build configuration. </p><hr><h2 id="axios-axios"><a href="#axios-axios" class="headerlink" title="axios / axios :"></a><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios / axios</a> :</h2><p>1,805 stars this month</p><p>Promise based HTTP client for the browser and node.js </p><hr><h2 id="GoogleChrome-puppeteer"><a href="#GoogleChrome-puppeteer" class="headerlink" title="GoogleChrome / puppeteer :"></a><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">GoogleChrome / puppeteer</a> :</h2><p>1,789 stars this month</p><p>Headless Chrome Node API </p><hr><h2 id="alibaba-ice"><a href="#alibaba-ice" class="headerlink" title="alibaba / ice :"></a><a href="https://github.com/alibaba/ice" target="_blank" rel="noopener">alibaba / ice</a> :</h2><p>1,731 stars this month</p><p>🚀 飞冰 - 让前端开发简单而友好，海量可复用物料，配套桌面工具极速构建前端应用，效率提升 100% </p><hr><h2 id="airbnb-javascript"><a href="#airbnb-javascript" class="headerlink" title="airbnb / javascript :"></a><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb / javascript</a> :</h2><p>1,483 stars this month</p><p>JavaScript Style Guide </p><hr><h2 id="hasura-graphqurl"><a href="#hasura-graphqurl" class="headerlink" title="hasura / graphqurl :"></a><a href="https://github.com/hasura/graphqurl" target="_blank" rel="noopener">hasura / graphqurl</a> :</h2><p>1,629 stars this month</p><p>curl for GraphQL with autocomplete, subscriptions and GraphiQL. Also a dead-simple universal javascript GraphQL client. </p><hr><h2 id="BestDingSheng-resources"><a href="#BestDingSheng-resources" class="headerlink" title="BestDingSheng / resources :"></a><a href="https://github.com/BestDingSheng/resources" target="_blank" rel="noopener">BestDingSheng / resources</a> :</h2><p>1,585 stars this month</p><p>知名互联网企业内推资料整理 持续更新ing 。 目前已经维护五个微信群接近3000人，欢迎你的加入！ </p><hr><h2 id="pomber-code-surfer"><a href="#pomber-code-surfer" class="headerlink" title="pomber / code-surfer :"></a><a href="https://github.com/pomber/code-surfer" target="_blank" rel="noopener">pomber / code-surfer</a> :</h2><p>1,556 stars this month</p><p>React component for scrolling, zooming and highlighting code &lt;🏄/&gt; </p><hr><h2 id="GoogleChromeLabs-ndb"><a href="#GoogleChromeLabs-ndb" class="headerlink" title="GoogleChromeLabs / ndb :"></a><a href="https://github.com/GoogleChromeLabs/ndb" target="_blank" rel="noopener">GoogleChromeLabs / ndb</a> :</h2><p>1,549 stars this month</p><p>ndb is an improved debugging experience for Node.js, enabled by Chrome DevTools </p><hr><h2 id="facebook-react-native"><a href="#facebook-react-native" class="headerlink" title="facebook / react-native :"></a><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">facebook / react-native</a> :</h2><p>1,310 stars this month</p><p>A framework for building native apps with React. </p><hr><h2 id="ai-nanoid"><a href="#ai-nanoid" class="headerlink" title="ai / nanoid :"></a><a href="https://github.com/ai/nanoid" target="_blank" rel="noopener">ai / nanoid</a> :</h2><p>1,407 stars this month</p><p>A tiny (145 bytes), secure, URL-friendly, unique string ID generator for JavaScript. </p><hr><h2 id="storybooks-storybook"><a href="#storybooks-storybook" class="headerlink" title="storybooks / storybook :"></a><a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">storybooks / storybook</a> :</h2><p>1,331 stars this month</p><p>Interactive UI component dev &amp; test: React, React Native, Vue, Angular </p><hr><h2 id="nodejs-node"><a href="#nodejs-node" class="headerlink" title="nodejs / node :"></a><a href="https://github.com/nodejs/node" target="_blank" rel="noopener">nodejs / node</a> :</h2><p>1,164 stars this month</p><p>Node.js JavaScript runtime ✨🐢🚀✨ </p><hr><h2 id="gatsbyjs-gatsby"><a href="#gatsbyjs-gatsby" class="headerlink" title="gatsbyjs / gatsby :"></a><a href="https://github.com/gatsbyjs/gatsby" target="_blank" rel="noopener">gatsbyjs / gatsby</a> :</h2><p>1,194 stars this month</p><p>⚛️📄🚀 Blazing fast site generator for React </p><hr><blockquote><p>本文链接： <a href="https://alili.tech/archive/c4353316/">https://alili.tech/archive/c4353316/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/650c34ac/">2017年08月Github Javascript趋势收集</a></li><li><a href="https://alili.tech/archive/53fea45f/">2017年09月Github Javascript趋势收集</a></li><li><a href="https://alili.tech/archive/1b9974b0/">2017年11月Github Javascript趋势收集</a></li><li><a href="https://alili.tech/archive/408ec5a5/">2017年12月Github Javascript趋势收集</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/github_11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;felixrieseberg-windows95&quot;&gt;&lt;a href=&quot;#felixrieseberg-windows95&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="Trending" scheme="https://alili.tech/tags/Trending/"/>
    
  </entry>
  
  <entry>
    <title>Linux -  Centos 时区设置</title>
    <link href="https://alili.tech/archive/3f6742b1/"/>
    <id>https://alili.tech/archive/3f6742b1/</id>
    <published>2018-07-30T12:32:05.000Z</published>
    <updated>2018-10-06T23:09:00.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="timedatectl-命令"><a href="#timedatectl-命令" class="headerlink" title="timedatectl 命令"></a>timedatectl 命令</h2><h3 id="查看当前时区状态"><a href="#查看当前时区状态" class="headerlink" title="查看当前时区状态"></a>查看当前时区状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ timedatectl status</span><br><span class="line">      Local time: Fri 2018-08-31 13:42:42 CST</span><br><span class="line">  Universal time: Fri 2018-08-31 05:42:42 UTC</span><br><span class="line">        RTC time: n/a</span><br><span class="line">       Time zone: Asia/Shanghai (CST, +0800)</span><br><span class="line">     NTP enabled: n/a</span><br><span class="line">NTP synchronized: yes</span><br><span class="line"> RTC <span class="keyword">in</span> <span class="built_in">local</span> TZ: no</span><br><span class="line">      DST active: n/a</span><br></pre></td></tr></table></figure><h3 id="设置时区为上海"><a href="#设置时区为上海" class="headerlink" title="设置时区为上海"></a>设置时区为上海</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai <span class="comment"># 设置系统时区为上海</span></span><br></pre></td></tr></table></figure><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ timedatectl list-timezones <span class="comment"># 列出所有时区</span></span><br><span class="line"></span><br><span class="line">$ timedatectl <span class="built_in">set</span>-local-rtc 1 <span class="comment"># 将硬件时钟调整为与本地时钟一致, 0 为设置为 UTC 时间</span></span><br></pre></td></tr></table></figure><blockquote><p>本文链接： <a href="https://alili.tech/archive/3f6742b1/">https://alili.tech/archive/3f6742b1/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/7f7747d0/">Linux - vim vi学习笔记</a></li><li><a href="https://alili.tech/archive/5f4cf684/">Linux -  使用ssh-copy-id命令实现ssh Linux免密码登陆</a></li><li><a href="https://alili.tech/archive/d150fc3c/">Linux - 安装nginx步骤</a></li><li><a href="http://www.huweihuang.com/article/linux/ansible-usage/">[Linux] ansible的使用</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;timedatectl-命令&quot;&gt;&lt;a href=&quot;#timedatectl-命令&quot; class=&quot;headerlink&quot; title=&quot;timedatectl 命令&quot;&gt;&lt;/a&gt;timedatectl 命令&lt;/h2&gt;&lt;h3 id=&quot;查看当前时区状态&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://alili.tech/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>2018年07月Github Javascript趋势收集</title>
    <link href="https://alili.tech/archive/280d4016/"/>
    <id>https://alili.tech/archive/280d4016/</id>
    <published>2018-07-07T16:00:00.000Z</published>
    <updated>2018-10-06T23:03:45.425Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/github_31.png" alt=""></p><h2 id="vuejs-vue"><a href="#vuejs-vue" class="headerlink" title="vuejs / vue :"></a><a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vuejs / vue</a> :</h2><p>10,466 stars this month</p><p>🖖 A progressive, incrementally-adoptable JavaScript framework for building UI on the web. </p><hr><h2 id="facebook-react"><a href="#facebook-react" class="headerlink" title="facebook / react :"></a><a href="https://github.com/facebook/react" target="_blank" rel="noopener">facebook / react</a> :</h2><p>8,581 stars this month</p><p>A declarative, efficient, and flexible JavaScript library for building user interfaces. </p><hr><h2 id="trekhleb-javascript-algorithms"><a href="#trekhleb-javascript-algorithms" class="headerlink" title="trekhleb / javascript-algorithms :"></a><a href="https://github.com/trekhleb/javascript-algorithms" target="_blank" rel="noopener">trekhleb / javascript-algorithms</a> :</h2><p>5,758 stars this month</p><p>Algorithms and data structures implemented in JavaScript with explanations and links to further readings </p><hr><h2 id="Netflix-pollyjs"><a href="#Netflix-pollyjs" class="headerlink" title="Netflix / pollyjs :"></a><a href="https://github.com/Netflix/pollyjs" target="_blank" rel="noopener">Netflix / pollyjs</a> :</h2><p>5,719 stars this month</p><p>Record, Replay, and Stub HTTP Interactions. </p><hr><h2 id="NervJS-taro"><a href="#NervJS-taro" class="headerlink" title="NervJS / taro :"></a><a href="https://github.com/NervJS/taro" target="_blank" rel="noopener">NervJS / taro</a> :</h2><p>4,675 stars this month</p><p>多端统一开发框架，支持用 React 的开发方式编写一次代码，生成能运行在微信小程序、H5、React Native 等的应用。 </p><hr><h2 id="GeekyAnts-vue-native-core"><a href="#GeekyAnts-vue-native-core" class="headerlink" title="GeekyAnts / vue-native-core :"></a><a href="https://github.com/GeekyAnts/vue-native-core" target="_blank" rel="noopener">GeekyAnts / vue-native-core</a> :</h2><p>4,213 stars this month</p><p>Vue Native is a framework to build cross platform native mobile apps using JavaScript </p><hr><h2 id="facebook-Sonar"><a href="#facebook-Sonar" class="headerlink" title="facebook / Sonar :"></a><a href="https://github.com/facebook/Sonar" target="_blank" rel="noopener">facebook / Sonar</a> :</h2><p>3,616 stars this month</p><p>A desktop debugging platform for mobile developers. </p><hr><h2 id="kitze-JSUI"><a href="#kitze-JSUI" class="headerlink" title="kitze / JSUI :"></a><a href="https://github.com/kitze/JSUI" target="_blank" rel="noopener">kitze / JSUI</a> :</h2><p>3,098 stars this month</p><p>A powerful UI toolkit for managing JavaScript apps </p><hr><h2 id="facebook-create-react-app"><a href="#facebook-create-react-app" class="headerlink" title="facebook / create-react-app :"></a><a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">facebook / create-react-app</a> :</h2><p>1,790 stars this month</p><p>Create React apps with no build configuration. </p><hr><h2 id="HcySunYang-vue-design"><a href="#HcySunYang-vue-design" class="headerlink" title="HcySunYang / vue-design :"></a><a href="https://github.com/HcySunYang/vue-design" target="_blank" rel="noopener">HcySunYang / vue-design</a> :</h2><p>1,995 stars this month</p><p>📖逐行级别的源码分析 </p><hr><h2 id="Canner-canner"><a href="#Canner-canner" class="headerlink" title="Canner / canner :"></a><a href="https://github.com/Canner/canner" target="_blank" rel="noopener">Canner / canner</a> :</h2><p>1,851 stars this month</p><p>📡 Universal Content Management System(CMS) framework using React &amp; Apollo GraphQL. Support Prisma, GraphQL, Firebase and Restful API </p><hr><h2 id="axios-axios"><a href="#axios-axios" class="headerlink" title="axios / axios :"></a><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios / axios</a> :</h2><p>1,721 stars this month</p><p>Promise based HTTP client for the browser and node.js </p><hr><h2 id="spritejs-spritejs"><a href="#spritejs-spritejs" class="headerlink" title="spritejs / spritejs :"></a><a href="https://github.com/spritejs/spritejs" target="_blank" rel="noopener">spritejs / spritejs</a> :</h2><p>1,713 stars this month</p><p>A cross-platform lightweight 2D render object model. </p><hr><h2 id="facebook-react-native"><a href="#facebook-react-native" class="headerlink" title="facebook / react-native :"></a><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">facebook / react-native</a> :</h2><p>1,486 stars this month</p><p>A framework for building native apps with React. </p><hr><h2 id="airbnb-javascript"><a href="#airbnb-javascript" class="headerlink" title="airbnb / javascript :"></a><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb / javascript</a> :</h2><p>1,443 stars this month</p><p>JavaScript Style Guide </p><hr><h2 id="GoogleChrome-puppeteer"><a href="#GoogleChrome-puppeteer" class="headerlink" title="GoogleChrome / puppeteer :"></a><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">GoogleChrome / puppeteer</a> :</h2><p>1,434 stars this month</p><p>Headless Chrome Node API </p><hr><h2 id="teambit-bit"><a href="#teambit-bit" class="headerlink" title="teambit / bit :"></a><a href="https://github.com/teambit/bit" target="_blank" rel="noopener">teambit / bit</a> :</h2><p>1,474 stars this month</p><p>Easily share code between projects with your team. </p><hr><h2 id="webkul-vivid"><a href="#webkul-vivid" class="headerlink" title="webkul / vivid :"></a><a href="https://github.com/webkul/vivid" target="_blank" rel="noopener">webkul / vivid</a> :</h2><p>1,444 stars this month</p><p>a JavaScript library which is built to easily customize and use the SVG Icons with a blaze. </p><hr><h2 id="twbs-bootstrap"><a href="#twbs-bootstrap" class="headerlink" title="twbs / bootstrap :"></a><a href="https://github.com/twbs/bootstrap" target="_blank" rel="noopener">twbs / bootstrap</a> :</h2><p>1,001 stars this month</p><p>The most popular HTML, CSS, and JavaScript framework for developing responsive, mobile first projects on the web. </p><hr><h2 id="nodejs-node"><a href="#nodejs-node" class="headerlink" title="nodejs / node :"></a><a href="https://github.com/nodejs/node" target="_blank" rel="noopener">nodejs / node</a> :</h2><p>1,262 stars this month</p><p>Node.js JavaScript runtime ✨🐢🚀✨ </p><hr><h2 id="marktext-marktext"><a href="#marktext-marktext" class="headerlink" title="marktext / marktext :"></a><a href="https://github.com/marktext/marktext" target="_blank" rel="noopener">marktext / marktext</a> :</h2><p>1,368 stars this month</p><p>📝Next generation markdown editor, running on platforms of MacOS Windows and Linux. </p><hr><h2 id="parcel-bundler-parcel"><a href="#parcel-bundler-parcel" class="headerlink" title="parcel-bundler / parcel :"></a><a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener">parcel-bundler / parcel</a> :</h2><p>1,247 stars this month</p><p>📦🚀 Blazing fast, zero configuration web application bundler </p><hr><h2 id="ml5js-ml5-library"><a href="#ml5js-ml5-library" class="headerlink" title="ml5js / ml5-library :"></a><a href="https://github.com/ml5js/ml5-library" target="_blank" rel="noopener">ml5js / ml5-library</a> :</h2><p>1,232 stars this month</p><p>Friendly machine learning for the web! 🤖 </p><hr><h2 id="Meituan-Dianping-mpvue"><a href="#Meituan-Dianping-mpvue" class="headerlink" title="Meituan-Dianping / mpvue :"></a><a href="https://github.com/Meituan-Dianping/mpvue" target="_blank" rel="noopener">Meituan-Dianping / mpvue</a> :</h2><p>1,079 stars this month</p><p>基于 Vue.js 的小程序开发框架，从底层支持 Vue.js 语法和构建工具体系。 </p><hr><h2 id="vuejs-vue-cli"><a href="#vuejs-vue-cli" class="headerlink" title="vuejs / vue-cli :"></a><a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">vuejs / vue-cli</a> :</h2><p>1,044 stars this month</p><p>🛠️ CLI for rapid Vue.js development </p><hr><blockquote><p>本文链接： <a href="https://alili.tech/archive/280d4016/">https://alili.tech/archive/280d4016/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/650c34ac/">2017年08月Github Javascript趋势收集</a></li><li><a href="https://alili.tech/archive/53fea45f/">2017年09月Github Javascript趋势收集</a></li><li><a href="https://alili.tech/archive/1b9974b0/">2017年11月Github Javascript趋势收集</a></li><li><a href="https://alili.tech/archive/408ec5a5/">2017年12月Github Javascript趋势收集</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/github_31.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;vuejs-vue&quot;&gt;&lt;a href=&quot;#vuejs-vue&quot; class=&quot;headerlink&quot; title=&quot;vuejs / vue :&quot;&gt;&lt;/a&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="Trending" scheme="https://alili.tech/tags/Trending/"/>
    
  </entry>
  
  <entry>
    <title>2018年06月Github Javascript趋势收集</title>
    <link href="https://alili.tech/archive/1effd0e5/"/>
    <id>https://alili.tech/archive/1effd0e5/</id>
    <published>2018-06-07T16:00:00.000Z</published>
    <updated>2018-10-06T23:03:41.397Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/github_54.png" alt=""></p><h2 id="trekhleb-javascript-algorithms"><a href="#trekhleb-javascript-algorithms" class="headerlink" title="trekhleb / javascript-algorithms :"></a><a href="https://github.com/trekhleb/javascript-algorithms" target="_blank" rel="noopener">trekhleb / javascript-algorithms</a> :</h2><p>20,629 stars this month</p><p>Algorithms and data structures implemented in JavaScript with explanations and links to further readings </p><hr><h2 id="klauscfhq-signale"><a href="#klauscfhq-signale" class="headerlink" title="klauscfhq / signale :"></a><a href="https://github.com/klauscfhq/signale" target="_blank" rel="noopener">klauscfhq / signale</a> :</h2><p>5,210 stars this month</p><p>👋 Hackable console logger </p><hr><h2 id="wiredjs-wired-elements"><a href="#wiredjs-wired-elements" class="headerlink" title="wiredjs / wired-elements :"></a><a href="https://github.com/wiredjs/wired-elements" target="_blank" rel="noopener">wiredjs / wired-elements</a> :</h2><p>4,991 stars this month</p><p>Collection of elements that appear hand drawn. Great for wireframes. </p><hr><h2 id="vuejs-vue"><a href="#vuejs-vue" class="headerlink" title="vuejs / vue :"></a><a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vuejs / vue</a> :</h2><p>3,987 stars this month</p><p>🖖 A progressive, incrementally-adoptable JavaScript framework for building UI on the web. </p><hr><h2 id="mimecorg-vuido"><a href="#mimecorg-vuido" class="headerlink" title="mimecorg / vuido :"></a><a href="https://github.com/mimecorg/vuido" target="_blank" rel="noopener">mimecorg / vuido</a> :</h2><p>4,126 stars this month</p><p>Native desktop applications using Vue.js. </p><hr><h2 id="RelaxedJS-ReLaXed"><a href="#RelaxedJS-ReLaXed" class="headerlink" title="RelaxedJS / ReLaXed :"></a><a href="https://github.com/RelaxedJS/ReLaXed" target="_blank" rel="noopener">RelaxedJS / ReLaXed</a> :</h2><p>3,609 stars this month</p><p>Create PDF documents using web technologies </p><hr><h2 id="olistic-warriorjs"><a href="#olistic-warriorjs" class="headerlink" title="olistic / warriorjs :"></a><a href="https://github.com/olistic/warriorjs" target="_blank" rel="noopener">olistic / warriorjs</a> :</h2><p>3,555 stars this month</p><p>An exciting game of programming and Artificial Intelligence </p><hr><h2 id="iamkun-dayjs"><a href="#iamkun-dayjs" class="headerlink" title="iamkun / dayjs :"></a><a href="https://github.com/iamkun/dayjs" target="_blank" rel="noopener">iamkun / dayjs</a> :</h2><p>3,130 stars this month</p><p>⏰ Day.js 2KB immutable date library alternative to Moment.js with the same modern API </p><hr><h2 id="facebook-react"><a href="#facebook-react" class="headerlink" title="facebook / react :"></a><a href="https://github.com/facebook/react" target="_blank" rel="noopener">facebook / react</a> :</h2><p>2,868 stars this month</p><p>A declarative, efficient, and flexible JavaScript library for building user interfaces. </p><hr><h2 id="isomorphic-git-isomorphic-git"><a href="#isomorphic-git-isomorphic-git" class="headerlink" title="isomorphic-git / isomorphic-git :"></a><a href="https://github.com/isomorphic-git/isomorphic-git" target="_blank" rel="noopener">isomorphic-git / isomorphic-git</a> :</h2><p>2,947 stars this month</p><p>A pure JavaScript implementation of git for node and browsers! </p><hr><h2 id="reach-router"><a href="#reach-router" class="headerlink" title="reach / router :"></a><a href="https://github.com/reach/router" target="_blank" rel="noopener">reach / router</a> :</h2><p>2,532 stars this month</p><hr><h2 id="vincentriemer-react-native-dom"><a href="#vincentriemer-react-native-dom" class="headerlink" title="vincentriemer / react-native-dom :"></a><a href="https://github.com/vincentriemer/react-native-dom" target="_blank" rel="noopener">vincentriemer / react-native-dom</a> :</h2><p>2,368 stars this month</p><p>An experimental, comprehensive port of React Native to the web. </p><hr><h2 id="facebook-create-react-app"><a href="#facebook-create-react-app" class="headerlink" title="facebook / create-react-app :"></a><a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">facebook / create-react-app</a> :</h2><p>2,036 stars this month</p><p>Create React apps with no build configuration. </p><hr><h2 id="mui-org-material-ui"><a href="#mui-org-material-ui" class="headerlink" title="mui-org / material-ui :"></a><a href="https://github.com/mui-org/material-ui" target="_blank" rel="noopener">mui-org / material-ui</a> :</h2><p>2,035 stars this month</p><p>React components that implement Google’s Material Design. </p><hr><h2 id="fejes713-30-seconds-of-interviews"><a href="#fejes713-30-seconds-of-interviews" class="headerlink" title="fejes713 / 30-seconds-of-interviews :"></a><a href="https://github.com/fejes713/30-seconds-of-interviews" target="_blank" rel="noopener">fejes713 / 30-seconds-of-interviews</a> :</h2><p>2,068 stars this month</p><p>A curated collection of common interview questions to help you prepare for your next interview. </p><hr><h2 id="axios-axios"><a href="#axios-axios" class="headerlink" title="axios / axios :"></a><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios / axios</a> :</h2><p>1,933 stars this month</p><p>Promise based HTTP client for the browser and node.js </p><hr><h2 id="GoogleChrome-puppeteer"><a href="#GoogleChrome-puppeteer" class="headerlink" title="GoogleChrome / puppeteer :"></a><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">GoogleChrome / puppeteer</a> :</h2><p>1,842 stars this month</p><p>Headless Chrome Node API </p><hr><h2 id="uber-kepler-gl"><a href="#uber-kepler-gl" class="headerlink" title="uber / kepler.gl :"></a><a href="https://github.com/uber/kepler.gl" target="_blank" rel="noopener">uber / kepler.gl</a> :</h2><p>1,813 stars this month</p><hr><h2 id="justjavac-free-programming-books-zh-CN"><a href="#justjavac-free-programming-books-zh-CN" class="headerlink" title="justjavac / free-programming-books-zh_CN :"></a><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="noopener">justjavac / free-programming-books-zh_CN</a> :</h2><p>1,643 stars this month</p><p>📚 免费的计算机编程类中文书籍，欢迎投稿 </p><hr><h2 id="kusti8-proton-native"><a href="#kusti8-proton-native" class="headerlink" title="kusti8 / proton-native :"></a><a href="https://github.com/kusti8/proton-native" target="_blank" rel="noopener">kusti8 / proton-native</a> :</h2><p>1,823 stars this month</p><p>A React environment for cross platform native desktop apps </p><hr><h2 id="nodejs-node"><a href="#nodejs-node" class="headerlink" title="nodejs / node :"></a><a href="https://github.com/nodejs/node" target="_blank" rel="noopener">nodejs / node</a> :</h2><p>1,603 stars this month</p><p>Node.js JavaScript runtime ✨🐢🚀✨ </p><hr><h2 id="stereobooster-react-ideal-image"><a href="#stereobooster-react-ideal-image" class="headerlink" title="stereobooster / react-ideal-image :"></a><a href="https://github.com/stereobooster/react-ideal-image" target="_blank" rel="noopener">stereobooster / react-ideal-image</a> :</h2><p>1,727 stars this month</p><p>🖼️ An Almost Ideal React Image Component </p><hr><h2 id="airbnb-javascript"><a href="#airbnb-javascript" class="headerlink" title="airbnb / javascript :"></a><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb / javascript</a> :</h2><p>1,521 stars this month</p><p>JavaScript Style Guide </p><hr><h2 id="egoist-maid"><a href="#egoist-maid" class="headerlink" title="egoist / maid :"></a><a href="https://github.com/egoist/maid" target="_blank" rel="noopener">egoist / maid</a> :</h2><p>1,657 stars this month</p><p>Markdown driven task runner. </p><hr><h2 id="facebook-react-native"><a href="#facebook-react-native" class="headerlink" title="facebook / react-native :"></a><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">facebook / react-native</a> :</h2><p>1,485 stars this month</p><p>A framework for building native apps with React. </p><hr><blockquote><p>本文链接： <a href="https://alili.tech/archive/1effd0e5/">https://alili.tech/archive/1effd0e5/</a> <br> 转载请注明出处,欢迎转载哟</p></blockquote><div><h1>相关文章</h1><ul><li><a href="https://alili.tech/archive/650c34ac/">2017年08月Github Javascript趋势收集</a></li><li><a href="https://alili.tech/archive/53fea45f/">2017年09月Github Javascript趋势收集</a></li><li><a href="https://alili.tech/archive/1b9974b0/">2017年11月Github Javascript趋势收集</a></li><li><a href="https://alili.tech/archive/408ec5a5/">2017年12月Github Javascript趋势收集</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/github_54.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;trekhleb-javascript-algorithms&quot;&gt;&lt;a href=&quot;#trekhleb-javascript-algorithms&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="Trending" scheme="https://alili.tech/tags/Trending/"/>
    
  </entry>
  
</feed>
